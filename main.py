# MUSIC GAME BY KIERON PANG
# FINISHED 2025
# ASSISTED WITH AI FOR LEARNING PROCESS

import pygame
from note import Note
import random
import os
import sys

# CONSTANTS
SCREEN_WIDTH, SCREEN_HEIGHT = 1280, 720
FPS=60
STANDARD_TIME = 1000
SONG_DELAY = 200

CIRCLE_RADIUS = 26
CIRCLE_OFFSET = 25
FLASH_WIDTH, FLASH_HEIGHT = 100, 550
FLASH_DURATION = 80
LANE_START_X = 675
LANE_GAP = 137.5
LANE_COUNT = 4
HIT_Y = 612.5
MISS_MARGIN = 40
VERTICAL_HIT_RANGE = 400

# POINTS
PERFECT = 200
GOOD = 100
OKAY = 50
BAD = -50
MISS = -200

# THRESHOLDS FOR POINTS
PERFECT_THRESHOLD = 40
GOOD_THRESHOLD = 60
OKAY_THRESHOLD = 80

# POINTS WEIGHTS
HIT_WEIGHTS = {
    "PERFECT": 1.5,
    "GOOD": 1.2,
    "OKAY": 1,
    "MISS": 0,
    "BAD": 0
}

hit_counts = {
    "PERFECT": 0,
    "GOOD": 0,
    "OKAY": 0,
    "MISS": 0,
    "BAD": 0
}

# COLOURS
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
YELLOW  = (255, 255, 0)
GREEN = (0, 255, 0)
SEMI_BLACK = (0, 0, 0, 51)
FLASH_COLOUR = (128, 128, 128, 100)
MIDBLUE = (0, 0, 128)
LIGHTGREEN = (144, 238, 144)
LIGHTPINK = (255, 192, 203) 
LIGHTBLUE = (173, 216, 230)
LAVENDER = (180, 130, 255)
LIGHTORANGE = (255, 165, 0)
LIGHTWHITE = (220, 220, 220)
PINK = (255, 105, 180)
LIGHTPURPLE = (147, 112, 219)
SOFTBLUE = (0, 128, 255)
MAGICPURPLE = (128, 0, 128)
GOLDYELLOW = (255, 215, 50)

# HIT COLOURS
HIT_COLOURS = {
    "PERFECT" : GREEN,
    "GOOD" : BLUE,
    "OKAY" : YELLOW,
    "BAD" : BLACK,
    "MISS" : RED
}
DISAPPEAR_TIME = 125

SONG_NOTE_COLOURS = {
    "music/LionHeart.mp3": LIGHTGREEN,
    "music/Suki.mp3": LIGHTPINK,
    "music/As Wished.mp3": LAVENDER,
    "music/Chimera.mp3": LIGHTBLUE,
    "music/Flowers without snow.mp3": LIGHTWHITE,
    "music/SPARKS.mp3": LIGHTORANGE,
    "music/Wrap me in plastic.mp3": PINK,
    "music/High Tide.mp3": LIGHTPURPLE,
    "music/It's Okay Now.mp3": SOFTBLUE,
    "music/Psycho.mp3": MAGICPURPLE,
    "music/RISE UP.mp3": GOLDYELLOW
}

# Key-to-lane mapping
KEY_TO_LANE = {
    pygame.K_a: 0,
    pygame.K_s: 1,
    pygame.K_k: 2,
    pygame.K_l: 3
}

# MUSIC
lionHeart = [
    (700, 0),
    (1050, 2),  # added offbeat
    (1300, 1),
    (1700, 2),
    (2100, 0),
    (2100, 3),

    (2600, 3),
    (2800, 1),  # quick pair here

    (3200, 2),

    (3700, 0),
    (4100, 1),
    (4200, 3),  # simultaneous notes

    (4600, 2),
    (4600, 1),

    (5100, 0),
    (5300, 1),

    (5700, 3),
    (6000, 2),  # offbeat fill

    (6300, 0),
    (6700, 1),

    (7200, 3),
    (7400, 2),
    (7400, 3),

    (7800, 0),
    (8200, 1),
    (8600, 3),  # quick pair

    (9000, 0),
    (9400, 2),

    (9800, 1),
    (10100, 3),

    (10500, 0),
    (10800, 1),

    (11200, 2),
    (11500, 3),

    (11900, 0),
    (12300, 1),

    (12700, 2),
    (13000, 3),

    (13400, 1),
    (13700, 0),

    (14100, 2),
    (14500, 3),

    (15000, 1),
    (15300, 0),

    (15700, 2),
    (16000, 3),

    (16400, 1),
    (16800, 0),

    (17200, 2),
    (17600, 3),

    (18000, 0),
    (18300, 1),
    (18300, 3),

    (18700, 2),
    (19000, 3),

    (19400, 1),
    (19700, 0),

    (20100, 2),
    (20500, 3),

    (20800, 1),
    (21100, 0),

    (21500, 2),
    (21800, 3),

    (22200, 0),
    (22600, 1),

    (22900, 3),
    (23200, 2),

    (23700, 1),
    (24000, 0),

    (24400, 2),
    (24800, 3),

    (25200, 1),
    (25500, 0),

    (25900, 2),
    (26200, 3),

    (26600, 0),
    (27000, 1),

    (27300, 3),
    (27600, 2),

    (28000, 0),
    (28400, 1),

    (28800, 2),
    (29100, 3),

    (29500, 1),
    (29900, 0),

    (30300, 2),
    (30600, 3),

    (31000, 1),
    (31300, 0),

    (31700, 2),
    (32000, 3),

    (32400, 1),
    (32700, 0),

    (33100, 2),
    (33500, 3),

    (33800, 0),
    (34100, 1),

    (34500, 3),
    (34800, 2),

    (35200, 0),
    (35500, 1),

    (35900, 2),
    (36300, 3),

    (36600, 1),
    (37000, 0),

    (37400, 2),
    (37700, 3),

    (38100, 0),
    (38400, 1),

    (38800, 2),
    (39200, 3),

    (39500, 1),
    (39900, 0),

    (40300, 2),
    (40600, 3),

    (41000, 0),
    (41400, 1),

    (41700, 3),
    (42000, 2),

    (42300, 0),
    (42600, 1),

    (43000, 2),
    (43300, 3),

    (43700, 1),
    (44000, 0),

    (44400, 2),
    (44700, 3),

    (45100, 0),
    (45500, 1),

    (45800, 2),
    (46100, 3),

    (46500, 0),
    (46800, 1),

    (47200, 2),
    (47500, 3),

    (47900, 1),
    (48200, 0),

    (48600, 2),
    (48900, 3),

    (49300, 0),
    (49700, 1),

    (50000, 3),
    (50300, 2),

    (50700, 0),
    (51000, 1),

    (51400, 3),
    (51700, 2),

    (52100, 0),
    (52500, 1),

    (52900, 1),
    (53200, 0),

    (53600, 2),
    (53900, 3),

    (54300, 0),
    (54600, 1),

    (55000, 2),
    (55300, 3),

    (55700, 1),
    (56000, 0),

    (56400, 2),
    (56700, 3),

    (57100, 0),
    (57500, 1),

    (57800, 2),
    (58100, 3),

    (58500, 0),
    (58900, 1),

    (59200, 2),
    (59500, 3),

    (59900, 0),
    (60200, 1),

    (60600, 2),
    (60900, 3),

    (61300, 1),
    (61600, 0),

    (62000, 2),
    (62300, 3),

    (62900, 1),
    (63200, 0),

    (63600, 3),
    (63900, 2),

    (64300, 1),
    (64600, 0),

    (65000, 2),
    (65300, 3),

    (65700, 1),
    (66000, 0),

    (66400, 2),
    (66700, 3),

    (67100, 0),
    (67400, 1),

    (67800, 2),
    (68100, 3),

    (68500, 0),
    (68900, 1),

    (69200, 2),
    (69500, 3),

    (69900, 1),
    (70200, 0),

    (70600, 2),
    (70900, 3),

    (71300, 1),
    (71600, 0),

    (72000, 3),
    (72300, 2),

    (72700, 0),
    (73000, 1),

    (73400, 2),
    (73700, 3),

    (74100, 0),
    (74400, 2),

    (74800, 1),
    (75100, 3),

    (75500, 0),
    (75800, 1),

    (76200, 2),
    (76500, 3),

    (76900, 0),
    (77200, 2),

    (77600, 1),
    (77900, 3),

    (78300, 0),
    (78600, 1),

    (79000, 2),
    (79300, 3),

    (79700, 0),
    (80000, 1),

    (80400, 2),
    (80700, 3),

    (81100, 0),
    (81400, 2),

    (81800, 1),
    (82100, 3),

    (82500, 0),
    (82500, 2),  # double hit
    (82800, 1),

    (83200, 3),
    (83500, 0),

    (83900, 1),
    (84200, 2),

    (84600, 0),
    (84600, 3),  # double hit
    (84900, 1),

    (85300, 2),
    (85600, 0),

    (86000, 1),
    (86300, 3),

    (86700, 0),
    (86700, 2),  # double hit
    (87000, 1),

    (87400, 2),
    (87700, 3),

    (88100, 0),
    (88400, 1),

    (88800, 0),
    (89100, 2),

    (89500, 1),
    (89500, 3),  # double hit
    (89800, 0),

    (90200, 2),
    (90500, 1),

    (90900, 0),
    (91200, 3),

    (91600, 1),
    (91600, 2),  # double hit
    (91900, 0),

    (92300, 2),
    (92600, 3),

    (93000, 0),
    (93300, 1),

    (93700, 0),
    (93700, 3),  # double hit
    (94000, 2),

    (94400, 1),
    (94700, 0),

    (95100, 2),
    (95400, 3),

    (95800, 0),
    (96100, 2),

    (96500, 1),
    (96800, 0),

    (97200, 3),
    (97500, 1),

    (97900, 0),
    (98200, 2),

    (98600, 0),
    (98900, 3),

    (99300, 1),
    (99600, 0),

    (100000, 2),
    (100300, 0),

    (100700, 1),
    (101000, 3),

    (101400, 0),
    (101400, 2),  # gentle double hit
    (101700, 1),

    (102100, 0),
    (102400, 3),

    (102800, 0),
    (103100, 2),

    (103500, 1),
    (103800, 0),

    (104200, 3),
    (104500, 1),

    (104900, 0),
    (105200, 2),

    (105600, 0),
    (105900, 3),

    (106300, 1),
    (106600, 0),

    (107000, 2),
    (107300, 0),

    (107700, 1),
    (108000, 3),

    (108400, 0),
    (108400, 2),  # light double
    (108700, 1),

    (109100, 0),

    (109100, 0),
    (109450, 2),
    (109750, 0),
    (110000, 3),
    (110250, 1),
    (110500, 3),
    (110750, 0),
    (111000, 2),
    (111250, 1),
    (111500, 0),
    (111750, 3),
    (112000, 1),
    (112250, 2),
    (112400, 0),
    (112400, 3),  # simultaneous double
    (112700, 1),
    (113000, 2),
    (113250, 0),
    (113500, 1),
    (113750, 3),
    (114000, 2),
    (114250, 1),
    (114500, 0),
    (114750, 2),
    (115000, 3),
    (115250, 0),
    (115400, 1),
    (115650, 3),
    (115900, 1),
    (116100, 2),
    (116300, 0),
    (116550, 2),
    (116800, 3),
    (117000, 1),
    (117250, 0),
    (117500, 3),
    (117700, 2),
    (117950, 1),
    (118200, 3),
    (118450, 0),
    (118700, 2),
    (118900, 1),
    (119150, 3),
    (119400, 0),
    (119650, 2),
    (119900, 1),
    (120150, 3),
    (120400, 0),
    (120650, 1),
    (120900, 2),
    (121150, 3),
    (121400, 0),
    (121650, 2),
    (121900, 1),
    (122150, 3),
    (122400, 0),
    (122650, 2),
    (122900, 1),
    (123150, 3),
    (123400, 0),
    (123650, 2),
    (123900, 1),
    (124150, 3),
    (124400, 0),
    (124650, 1),
    (124900, 2),
    (125150, 3),
    (125400, 0),
    (125650, 2),
    (125900, 1),
    (126150, 3),
    (126400, 0),
    (126650, 2),
    (126900, 1),
    (127150, 3),
    (127400, 0),
    (127650, 2),
    (127900, 1),
    (128150, 3),

    (128150, 1),
    (128400, 0),
    (128650, 3),
    (128900, 1),
    (129150, 2),
    (129400, 0),
    (129650, 3),
    (129900, 1),
    (130150, 0),
    (130400, 2),
    (130650, 1),
    (130900, 3),
    (131150, 0),
    (131400, 1),
    (131650, 2),
    (131900, 0),
    (132150, 3),
    (132400, 1),
    (132650, 2),
    (132900, 3),
    (133150, 0),
    (133400, 1),
    (133650, 2),
    (133900, 0),
    (134150, 3),
    (134400, 1),
    (134650, 2),
    (134900, 0),
    (135150, 3),
    (135400, 1),
    (135650, 0),
    (135900, 2),
    (136150, 3),
    (136400, 1),
    (136650, 0),
    (136900, 2),
    (137150, 3),
    (137400, 1),
    (137650, 0),
    (137900, 2),
    (138150, 3),
    (138400, 1),
    (138650, 0),
    (138900, 2),
    (139150, 3),
    (139400, 1),
    (139650, 0),
    (139900, 2),
    (140150, 3),
    (140400, 1),
    (140650, 0),
    (140900, 3),
    (141150, 2),
    (141400, 0),
    (141650, 3),
    (141900, 1),
    (142150, 2),
    (142400, 0),
    (142650, 3),
    (142900, 1),
    (143150, 0),
    (143400, 2),
    (143650, 3),
    (143900, 1),
    (144150, 0),
    (144400, 2),
    (144650, 3),
    (144900, 1),
    (145150, 0),
    (145400, 2),
    (145650, 3),

    (145900, 2),
    (146150, 0),
    (146400, 3),
    (146650, 1),
    (146900, 2),
    (147150, 0),
    (147400, 3),
    (147650, 1),
    (147900, 2),
    (148150, 0),
    (148400, 3),
    (148650, 1),
    (148900, 2),
    (149150, 0),
    (149400, 3),
    (149650, 1),
    (149900, 2),
    (150150, 0),
    (150400, 3),
    (150650, 1),
    (150900, 0),
    (151150, 2),
    (151400, 3),
    (151650, 1),
    (151900, 0),
    (152150, 2),
    (152400, 3),
    (152650, 1),
    (152900, 0),
    (153150, 2),
    (153400, 3),
    (153650, 1),
    (153900, 0),
    (154150, 2),
    (154400, 3),
    (154650, 1),
    (154900, 0),
    (155150, 2),
    (155400, 3),
    (155650, 1),
    (155900, 0),
    (156150, 2),
    (156400, 3),
    (156650, 1),
    (156900, 0),
    (157150, 2),
    (157400, 3),
    (157650, 1),
    (157900, 0),
    (158150, 2),
    (158400, 3),
    (158650, 1),
    (158900, 0),

    (159150, 1),
    (159400, 2),
    (159650, 0),
    (159900, 3),
    (160150, 1),
    (160400, 2),
    (160650, 0),
    (160900, 1),
    (161150, 2),
    (161400, 3),
    (161650, 0),
    (161900, 2),
    (162150, 1),
    (162400, 0),
    (162650, 3),
    (162900, 1),
    (163150, 2),
    (163400, 0),
    (163650, 1),
    (163900, 3),
    (164150, 2),
    (164400, 1),
    (164650, 0),
    (164900, 2),
    (165150, 1),
    (165400, 3),
    (165650, 0),
    (165900, 1),
    (166150, 2),
    (166400, 3),
    (166650, 0),
    (166900, 1),
    (167150, 2),
    (167400, 0),
    (167650, 3),
    (167900, 1),
    (168150, 2),
    (168400, 0),
    (168650, 3),
    (168900, 1),
    (169150, 2),
    (169400, 0),
    (169650, 1),
    (169900, 3),
    (170150, 2),
    (170400, 1),
    (170650, 0),
    (170900, 2),
    (171150, 1),
    (171400, 3),
    (171650, 0),
]

suki = [
 (400, 0),
    (700, 1),
    (1000, 0),
    (1300, 2),
    (1600, 1),
    (1900, 3),
    (2200, 2),
    (2500, 0),
    (2800, 1),
    (3100, 2),
    (3400, 3),
    (3600, 1),
    (3800, 2),
    (4000, 0),
    (4300, 1),
    (4600, 2),
    (4900, 3),
    (5000, 0),  # twin notes 3 & 0
    (5000, 3),
    (5300, 3),
    (5600, 1),
    (5900, 2),
    (6200, 0),
    (6500, 1),
    (6800, 2),
    (7000, 3),
    (7200, 1),
    (7400, 0),
    (7700, 2),
    (8000, 3),
    (8300, 1),
    (8600, 0),
    (8900, 2),
    (9200, 3),
    (9500, 1),
    (9800, 0),
    (10100, 2),
    (10400, 3),
    (10700, 1),
    (11000, 0),
    (11300, 2),
    (11500, 3),
    (11800, 1),
    (12000, 0),
    (12300, 2),
    (12600, 3),
    (12900, 1),
    (13200, 0),
    (13500, 2),
    (13700, 3),
    (14000, 1),
    (14300, 0),
    (14600, 2),
    (14900, 3),
    (15100, 1),
    (15400, 0),
    (15700, 2),
    (16000, 3),
    (16300, 1),
    (16600, 0),
    (16900, 2),
    (17100, 3),
    (17400, 1),
    (17700, 0),
    (18000, 2),
    (18300, 3),
    (18500, 1),
    (18800, 0),
    (19100, 2),
    (19400, 3),
    (19700, 1),
    (20000, 0),

    (20300, 2),
    (20600, 3),
    (20900, 0),
    (21200, 1),
    (21500, 2),
    (21800, 3),
    (22000, 0),
    (22200, 1),
    (22400, 2),
    (22600, 3),
    (22800, 1),
    (23000, 0),

    # Twin notes
    (23200, 0),
    (23200, 2),

    (23400, 1),
    (23400, 3),

    (23700, 2),
    (23700, 3),

    (24000, 0),
    (24300, 1),
    (24600, 2),

    # Twin notes
    (24900, 1),
    (24900, 2),

    (25200, 0),
    (25500, 3),
    (25800, 1),

    (26100, 2),
    (26400, 0),

    # Twin notes
    (26700, 1),
    (26700, 3),

    (27000, 2),
    (27300, 0),
    (27600, 1),

    # Twin notes
    (27900, 0),
    (27900, 3),

    (28200, 2),
    (28500, 1),
    (28800, 3),
    (29100, 0),
    (29400, 2),
    (29700, 1),

    (30000, 1),
    (30300, 3),
    (30600, 0),
    (30900, 2),
    (31200, 1),

    # Twin notes
    (31500, 0),
    (31500, 2),

    (31800, 3),
    (32100, 1),
    (32400, 2),

    # Twin notes
    (32700, 1),
    (32700, 3),

    (33000, 0),
    (33300, 2),
    (33600, 1),

    # Twin notes
    (33900, 0),
    (33900, 3),

    (34200, 2),
    (34500, 1),
    (34800, 0),

    # Twin notes
    (35100, 2),
    (35100, 3),

    (35400, 1),
    (35700, 0),
    (36000, 3),

    # Twin notes
    (36300, 1),
    (36300, 2),

    (36600, 0),
    (36900, 3),
    (37200, 1),
    (37500, 2),
    (37800, 0),
    (38100, 3),
    (38400, 1),
    (38700, 2),
    (39000, 0),
    (39300, 3),
    (39600, 1),
    (39900, 2),

    (40000, 2),
    (40300, 0),
    (40600, 1),
    (40900, 3),
    (41200, 2),

    # Twin notes
    (41500, 0),
    (41500, 1),

    (41800, 3),
    (42100, 2),
    (42400, 0),

    # Twin notes
    (42700, 1),
    (42700, 3),

    (43000, 2),
    (43300, 0),
    (43600, 1),

    # Twin notes
    (43900, 2),
    (43900, 3),

    (44200, 0),
    (44500, 1),
    (44800, 3),

    # Twin notes
    (45100, 0),
    (45100, 2),

    (45400, 1),
    (45700, 3),
    (46000, 0),

    # Twin notes
    (46300, 1),
    (46300, 2),

    (46600, 3),
    (46900, 0),
    (47200, 1),
    (47500, 2),
    (47800, 3),
    (48100, 0),
    (48400, 1),
    (48700, 2),
    (49000, 3),
    (49300, 0),
    (49600, 1),
    (49900, 2),

    (50000, 2),
    (50300, 3),

    # Twin notes
    (50600, 0),
    (50600, 1),

    (50900, 2),
    (51200, 3),
    (51500, 0),

    # Twin notes
    (51800, 1),
    (51800, 2),

    (52100, 3),
    (52400, 0),
    (52700, 1),

    # Twin notes
    (53000, 2),
    (53000, 3),

    (53300, 0),
    (53600, 1),
    (53900, 2),

    # Twin notes
    (54200, 0),
    (54200, 3),

    (54500, 1),
    (54800, 2),
    (55100, 3),

    # Twin notes
    (55400, 0),
    (55400, 1),

    (55700, 2),
    (56000, 3),
    (56300, 0),

    # Twin notes
    (56600, 1),
    (56600, 2),

    (56900, 3),
    (57200, 0),
    (57500, 1),
    (57800, 2),
    (58100, 3),
    (58400, 0),
    (58700, 1),
    (59000, 2),
    (59300, 3),
    (59600, 0),
    (59900, 1),

    (60000, 2),
    (60300, 3),

    # Twin notes
    (60600, 0),
    (60600, 1),

    (60900, 2),
    (61200, 3),
    (61500, 1),

    # Twin notes
    (61800, 0),
    (61800, 2),

    (62100, 3),
    (62400, 1),
    (62700, 0),

    # Twin notes
    (63000, 1),
    (63000, 3),

    (63300, 2),
    (63600, 0),
    (63900, 1),

    # Twin notes
    (64200, 2),
    (64200, 3),

    (64500, 0),
    (64800, 1),
    (65100, 3),

    # Twin notes
    (65400, 1),
    (65400, 2),

    (65700, 3),
    (66000, 0),
    (66300, 2),

    # Twin notes
    (66600, 0),
    (66600, 3),

    (66900, 1),
    (67200, 2),
    (67500, 3),

    (67800, 0),
    (68100, 1),
    (68400, 2),
    (68700, 3),
    (69000, 0),
    (69300, 1),
    (69600, 2),
    (69900, 3),

    (70000, 2),
    (70300, 0),

    # Twin notes
    (70600, 1),
    (70600, 3),

    (70900, 2),
    (71200, 0),
    (71500, 3),

    # Twin notes
    (71800, 0),
    (71800, 2),

    (72100, 1),
    (72400, 3),
    (72700, 0),

    # Twin notes
    (73000, 1),
    (73000, 2),

    (73300, 3),
    (73600, 0),
    (73900, 1),

    # Twin notes
    (74200, 2),
    (74200, 3),

    (74500, 0),
    (74800, 1),
    (75100, 2),

    # Twin notes
    (75400, 0),
    (75400, 3),

    (75700, 1),
    (76000, 2),
    (76300, 3),

    (76600, 0),
    (76900, 1),
    (77200, 2),
    (77500, 3),
    (77800, 0),
    (78100, 1),
    (78400, 2),
    (78700, 3),
    (79000, 1),
    (79300, 3),

    # Twin notes
    (79600, 0),
    (79600, 2),

    (79900, 1),
    (80200, 3),
    (80500, 0),

    # Twin notes
    (80800, 1),
    (80800, 2),

    (81100, 3),
    (81400, 0),
    (81700, 1),

    # Twin notes
    (82000, 2),
    (82000, 3),

    (82300, 0),
    (82600, 1),
    (82900, 2),

    # Twin notes
    (83200, 0),
    (83200, 3),

    (83500, 1),
    (83800, 2),
    (84100, 3),

    (84400, 0),
    (84700, 1),
    (85000, 2),
    (85300, 3),
    (85600, 0),
    (85900, 1),
    (86200, 2),
    (86500, 3),

    (88000, 1),
    (88300, 2),

    # Twin notes
    (88600, 0),
    (88600, 3),

    (88900, 1),
    (89200, 2),
    (89500, 0),

    # Twin notes
    (89800, 1),
    (89800, 3),

    (90100, 2),
    (90400, 0),
    (90700, 1),

    # Twin notes
    (91000, 2),
    (91000, 3),

    (91300, 0),
    (91600, 1),
    (91900, 2),

    # Twin notes
    (92200, 0),
    (92200, 3),

    (92500, 1),
    (92800, 2),
    (93100, 3),

    (93400, 0),
    (93700, 1),
    (94000, 2),
    (94300, 3),
    (94600, 0),
    (94900, 1),
    (95200, 2),
    (95500, 3),

    (95800, 1),
    (96100, 2),

    # Twin notes
    (96400, 0),
    (96400, 3),

    (96700, 1),
    (97000, 2),
    (97300, 0),

    (97600, 1),

    # Twin notes
    (97900, 2),
    (97900, 3),

    (98200, 0),
    (98500, 1),
    (98800, 2),

    # Twin notes
    (99100, 0),
    (99100, 3),

    (99400, 1),
    (99700, 2),
    (100000, 3),

    (100300, 0),
    (100600, 1),
    (100900, 2),

    # Twin notes
    (101200, 1),
    (101200, 3),

    (101500, 0),
    (101800, 1),
    (102100, 2),
    (102400, 3),

    (102700, 0),
    (103000, 1),

    # Twin notes
    (103300, 2),
    (103300, 3),

    (103600, 0),
    (103900, 1),
    (104200, 2),

    (104500, 3),
    (104800, 0),
    (105100, 1),

    # Twin notes
    (105400, 2),
    (105400, 3),

    (105700, 0),
    (106000, 1),
    (106300, 2),

    (106600, 3),
    (106900, 0),
    (107200, 1),

    (107500, 2),

    # Twin notes
    (107800, 1),
    (107800, 3),

    (108100, 0),
    (108400, 2),
    (108700, 3),

    (109000, 0),
    (109300, 1),

    # Twin notes
    (109600, 2),
    (109600, 3),

    (109900, 0),
    (110200, 1),
    (110500, 2),

    (110800, 3),
    (111100, 0),

    # Twin notes
    (111400, 1),
    (111400, 3),

    (111700, 2),
    (112000, 0),
    (112300, 1),

    (112600, 2),
    (112900, 3),
    (113200, 0),

    (113500, 1),
    (113800, 2),

    # Twin notes
    (114100, 0),
    (114100, 3),

    (114400, 1),
    (114700, 2),
    (115000, 3),
]

as_wished = [
(500, 2),
    (900, 0),
    (900, 3),  # twin notes at 900ms on lanes 0 & 3
    (1300, 1),
    (1700, 2),
    (2100, 0),
    (2500, 1),
    (2900, 3),
    (3300, 2),
    (3700, 0),
    (4100, 1),
    (4500, 3),
    (4900, 2),
    (5300, 0),
    (5700, 3),
    (6100, 1),
    (6500, 2),
    (6900, 0),
    (7300, 1),
    (7700, 3),
    (8100, 2),
    (8500, 0),
    (8900, 1),
    (9300, 3),
    (9700, 2),
    (10100, 0),
    (10500, 1),
    (10900, 3),
    (11300, 2),
    (11700, 0),
    (12100, 3),
    (12500, 1),
    (12900, 2),
    (13300, 0),
    (13700, 1),
    (14100, 3),
    (14500, 2),
    (14900, 0),

    (15300, 1),
    (15750, 2),
    (16200, 0),
    (16650, 3),
    (17100, 1),
    (17550, 2),
    (18000, 0),
    (18450, 1),
    (18900, 3),
    (19350, 2),
    (19800, 0),
    (20250, 3),
    (20700, 1),
    (21150, 2),
    (21600, 0),
    (22050, 3),
    (22500, 1),
    (22950, 0),
    (22950, 2),  # twin notes at 22950ms lanes 0 and 2
    (23400, 3),
    (23850, 1),
    (24300, 2),
    (24750, 0),
    (25200, 3),
    (25650, 1),
    (26100, 2),
    (26550, 0),
    (27000, 3),
    (27450, 1),
    (27900, 2),
    (28350, 0),
    (28800, 3),

    (29250, 2),
    (29700, 0),
    (30150, 1),
    (30600, 3),
    (31050, 2),
    (31500, 0),
    (31950, 1),
    (32400, 2),
    (32850, 3),
    (33300, 0),
    (33750, 1),
    (34200, 3),
    (34650, 2),
    (35100, 0),
    (35550, 1),
    (36000, 2),
    (36450, 0),
    (36900, 3),
    (37350, 1),
    (37800, 2),
    (38250, 0),
    (38700, 1),
    (39150, 3),
    (39600, 0),
    (40050, 1),
    (40500, 2),
    (40950, 3),
    (41400, 1),
    (41850, 0),
    (42300, 2),
    (42750, 3),
    (43200, 0),
    (43650, 1),
    (44100, 2),
    (44550, 0),
    (45000, 3),
    (45450, 1),
    (45900, 2),
    (46350, 0),
    (46800, 3),
    (47250, 1),
    (47700, 2),
    (48150, 0),
    (48600, 3),
    (49050, 1),
    (49500, 2),
    (49950, 0),
    (50400, 1),
    (50400, 3),  # twin notes at 50400ms lanes 1 and 3

    (50900, 2),
    (51350, 0),
    (51800, 1),
    (52250, 3),
    (52700, 2),
    (53100, 0),
    (53400, 1),
    (53700, 2),
    (54050, 3),
    (54400, 0),
    (54750, 1),
    (55100, 3),
    (55300, 2),
    (55500, 0),
    (55800, 1),
    (56100, 2),
    (56400, 0),
    (56700, 3),
    (57000, 1),
    (57300, 2),
    (57600, 0),
    (57900, 1),
    (58200, 3),
    (58500, 0),
    (58800, 1),
    (59000, 2),
    (59200, 3),
    (59400, 1),
    (59600, 0),
    (59900, 2),
    (60200, 3),
    (60500, 1),
    (60800, 0),
    (61100, 2),
    (61400, 3),
    (61600, 0),
    (61800, 1),
    (62100, 2),
    (62400, 0),
    (62700, 3),
    (63000, 1),
    (63300, 2),
    (63600, 0),
    (63900, 3),
    (64200, 1),
    (64500, 2),
    (64500, 0),  # twin notes: lanes 2 & 0
    (64800, 3),
    (65100, 1),

(65400, 2),
    (65700, 1),
    (66000, 3),
    (66300, 0),
    (66600, 2),
    (66900, 1),
    (67200, 3),
    (67500, 0),
    (67800, 1),
    (68100, 2),
    (68400, 0),
    (68700, 3),
    (69000, 1),
    (69300, 2),
    (69600, 0),
    (69900, 3),
    (70200, 1),
    (70500, 2),
    (70800, 0),
    (71100, 3),
    (71400, 1),
    (71700, 0),
    (71700, 2),  # twin notes: lanes 0 & 2
    (72000, 3),
    (72300, 1),
    (72600, 2),
    (72900, 0),
    (73200, 3),
    (73500, 1),
    (73800, 2),
    (74100, 0),
    (74400, 3),
    (74700, 1),
    (75000, 2),
    (75300, 0),
    (75600, 3),
    (75900, 1),
    (76200, 2),
    (76500, 0),
    (76800, 1),
    (77100, 3),
    (77400, 2),
    (77700, 0),
    (78000, 1),

(78300, 2),
    (78600, 1),
    (78900, 3),
    (79200, 0),
    (79500, 2),
    (79800, 1),
    (80100, 3),
    (80400, 0),
    (80700, 1),
    (81000, 2),
    (81300, 0),
    (81600, 3),
    (81900, 1),
    (82200, 2),
    (82500, 0),
    (82800, 3),
    (83100, 1),
    (83400, 2),
    (83700, 0),
    (84000, 3),
    (84300, 1),
    (84600, 2),
    (84900, 0),
    (85200, 3),
    (85500, 1),
    (85800, 2),
    (86100, 0),
    (86400, 1),
    (86700, 3),
    (87000, 2),
    (87300, 0),
    (87600, 1),

    (87900, 2),
    (88200, 1),
    (88500, 0),
    (88800, 3),
    (89100, 2),
    (89400, 1),
    (89700, 0),
    (90000, 3),
    (90300, 1),
    (90600, 2),
    (90900, 0),
    (91200, 3),
    (91500, 1),
    (91800, 2),
    (92100, 0),
    (92400, 3),
    (92700, 2),
    (93000, 1),
    (93300, 0),
    (93600, 3),
    (93900, 2),
    (94200, 1),
    (94500, 0),
    (94800, 3),
    (95100, 1),
    (95400, 2),
    (95700, 0),
    (96000, 3),
    (96300, 1),
    (96600, 2),
    (96900, 0),
    (97200, 3),

(97500, 2),
    (97800, 1),
    (98100, 0),
    (98400, 3),
    (98700, 2),
    (99000, 1),
    (99300, 0),
    (99600, 3),
    (99900, 1),
    (100200, 2),
    (100500, 0),
    (100800, 3),
    (101100, 1),
    (101400, 2),
    (101700, 0),
    (102000, 3),
    (102300, 2),
    (102600, 1),
    (102900, 0),
    (103200, 3),
    (103500, 2),
    (103800, 1),
    (104100, 0),
    (104400, 3),
    (104700, 1),
    (105000, 2),
    (105300, 0),
    (105600, 3),
    (105900, 1),
    (106200, 2),
    (106500, 0),
    (106800, 3),
]

chimera = [
    (350, 0),
    (600, 2),
    (850, 1), (850, 3),               # twin notes
    (1100, 0),
    (1350, 1),
    (1600, 2), (1600, 3),             # twin notes
    (1850, 0),
    (2100, 1),
    (2350, 3),
    (2600, 2), (2600, 1),             # twin notes
    (2850, 0),
    (3100, 2),
    (3350, 3),
    (3600, 1), (3600, 0), (3600, 2), # triplet - fast burst
    (3850, 3),
    (4100, 1),
    (4350, 0),
    (4600, 2),
    (4850, 1), (4850, 3),             # twin notes
    (5100, 0),
    (5350, 1),
    (5600, 2),
    (5850, 3), (5850, 0),             # twin notes
    (6100, 1),
    (6350, 2),
    (6600, 3),
    (6850, 1),
    (7100, 0), (7100, 2),             # twin notes
    (7350, 3),
    (7600, 1),
    (7850, 0),
    (8100, 2), (8100, 3),             # twin notes
    (8350, 1),
    (8600, 0),
    (8850, 2),
    (9100, 3),
    (9350, 1), (9350, 0), (9350, 2), # triplet - fast burst
    (9600, 3),
    (9850, 1),
    (10100, 0),
    (10350, 2), (10350, 1),           # twin notes
    (10600, 3),
    (10850, 0),
    (11100, 1),
    (11350, 2), (11350, 3),           # twin notes
    (11600, 0),
    (11850, 1),
    (12100, 3),
    (12350, 2),
    (12600, 0), (12600, 1),           # twin notes
    (12850, 3),
    (13100, 2),
    (13350, 1),
    (13600, 0), (13600, 3),           # twin notes
    (13850, 2),
    (14100, 1),
    (14350, 3),
    (14600, 0), (14600, 2),           # twin notes
    (14850, 1),
    (15100, 3),
    (15350, 0),
    (15600, 2), (15600, 1),           # twin notes
    (15850, 3),
    (16100, 0),
    (16350, 1),
    (16600, 2), (16600, 3),           # twin notes
    (16850, 0),
    (17100, 1),
    (17350, 3),
    (17600, 2),
    (17850, 0), (17850, 1),           # twin notes
    (18100, 3),
    (18350, 2),
    (18600, 1),
    (18850, 0), (18850, 3),           # twin notes
    (19100, 2),
    (19350, 1),
    (19600, 3),
    (19850, 0),
    (20100, 2), (20100, 1),           # twin notes
    (20350, 3),
    (20600, 0),
    (20850, 1),
    (21100, 2), (21100, 3),           # twin notes
    (21350, 0),
    (21600, 1),
    (21850, 3),
    (22100, 2),

 (22350, 1),
    (22600, 0), (22600, 2),           # twin notes
    (22850, 3),
    (23100, 1),
    (23350, 2),
    (23600, 0), (23600, 3),           # twin notes
    (23850, 1),
    (24100, 2),
    (24350, 3), (24350, 0), (24350, 1), # triplet burst
    (24600, 2),
    (24850, 3),
    (25100, 1),
    (25350, 0), (25350, 2),           # twin notes
    (25600, 3),
    (25850, 1),
    (26100, 0),
    (26350, 2), (26350, 3),           # twin notes
    (26600, 1),
    (26850, 0),
    (27100, 3),
    (27350, 2), (27350, 1),           # twin notes
    (27600, 0),
    (27850, 3),
    (28100, 1), (28100, 2),           # twin notes
    (28350, 0),
    (28600, 3),
    (28850, 1),
    (29100, 2),
    (29350, 0), (29350, 3),           # twin notes
    (29600, 1),
    (29850, 2),
    (30100, 0),
    (30350, 1), (30350, 3),           # twin notes
    (30600, 2),
    (30850, 0),
    (31100, 1),
    (31350, 3),
    (31600, 2), (31600, 0),           # twin notes
    (31850, 1),
    (32100, 3),
    (32350, 0),
    (32600, 2),
    (32850, 1), (32850, 3),           # twin notes
    (33100, 0),
    (33350, 2),
    (33600, 1),
    (33850, 3), (33850, 0), (33850, 2), # triplet burst
    (34100, 1),
    (34350, 3),
    (34600, 0),
    (34850, 2),
    (35100, 1), (35100, 3),           # twin notes
    (35350, 0),
    (35600, 2),
    (35850, 3),
    (36100, 1),
    (36350, 0), (36350, 2),           # twin notes
    (36600, 3),
    (36850, 1),
    (37100, 0),
    (37350, 2), (37350, 3),           # twin notes
    (37600, 1),
    (37850, 0),
    (38100, 3),
    (38350, 2), (38350, 1),           # twin notes
    (38600, 0),
    (38850, 3),
    (39100, 1), (39100, 2),           # twin notes
    (39350, 0),
    (39600, 3),
    (39850, 1),
    (40100, 2),
    (40350, 0), (40350, 3),           # twin notes
    (40600, 1),
    (40850, 2),
    (41100, 0),
    (41350, 1), (41350, 3),           # twin notes
    (41600, 2),
    (41850, 0),
    (42100, 1),
    (42350, 3),
    (42600, 2), (42600, 0),           # twin notes
    (42850, 1),
    (43100, 3),
    (43350, 0),
    (43600, 2),
    (43850, 1), (43850, 3),           # twin notes
    (44100, 0),
    (44350, 2),
    (44600, 1),
    (44850, 3), (44850, 0), (44850, 2), # triplet burst

(45100, 1),
    (45350, 3), (45350, 0),           # twin notes
    (45600, 2),
    (45850, 1),
    (46100, 0),
    (46350, 3), (46350, 2),           # twin notes
    (46600, 1),
    (46850, 0),
    (47100, 2),
    (47350, 3), (47350, 1),           # twin notes
    (47600, 0),
    (47850, 2),
    (48100, 1),
    (48350, 3),
    (48600, 0), (48600, 2),           # twin notes
    (48850, 1),
    (49100, 3),
    (49350, 0),
    (49600, 2),
    (49850, 1), (49850, 3),           # twin notes
    (50100, 0),
    (50350, 2),
    (50600, 1),
    (50850, 3),
    (51100, 0), (51100, 2),           # twin notes
    (51350, 1),
    (51600, 3),
    (51850, 0),
    (52100, 2),
    (52350, 1), (52350, 3),           # twin notes
    (52600, 0),
    (52850, 2),
    (53100, 1),
    (53350, 3),
    (53600, 0), (53600, 2),           # twin notes
    (53850, 1),
    (54100, 3),
    (54350, 0),
    (54600, 2),
    (54850, 1), (54850, 3),           # twin notes
    (55100, 0),
    (55350, 2),
    (55600, 1),
    (55850, 3),
    (56100, 0), (56100, 2),           # twin notes
    (56350, 1),
    (56600, 3),
    (56850, 0),
    (57100, 2),
    (57350, 1), (57350, 3),           # twin notes
    (57600, 0),
    (57850, 2),
    (58100, 1),
    (58350, 3),
    (58600, 0), (58600, 2),           # twin notes
    (58850, 1),
    (59100, 3),
    (59350, 0),
    (59600, 2),
    (59850, 1), (59850, 3),           # twin notes
    (60100, 0),
    (60350, 2),
    (60600, 1),
    (60850, 3),
    (61100, 0), (61100, 2),           # twin notes
    (61350, 1),
    (61600, 3),
    (61850, 0),
    (62100, 2),
    (62350, 1), (62350, 3),

(62600, 0),
    (62850, 2), (62850, 3),           # twin notes
    (63100, 1),
    (63350, 0),
    (63600, 3), (63600, 2),           # twin notes
    (63850, 1),
    (64100, 0),
    (64350, 3),
    (64600, 1), (64600, 2),           # twin notes
    (64850, 0),
    (65100, 3),
    (65350, 1),
    (65600, 2), (65600, 0),           # twin notes
    (65850, 3),
    (66100, 1),
    (66350, 0),
    (66600, 3), (66600, 2),           # twin notes
    (66850, 1),
    (67100, 0),
    (67350, 2),
    (67600, 1), (67600, 3),           # twin notes
    (67850, 0),
    (68100, 2),
    (68350, 3),
    (68600, 1), (68600, 0),           # twin notes
    (68850, 2),
    (69100, 3),
    (69350, 1),
    (69600, 0), (69600, 2),           # twin notes
    (69850, 3),
    (70100, 1),
    (70350, 0),
    (70600, 3), (70600, 2),           # twin notes
    (70850, 1),
    (71100, 0),
    (71350, 2),
    (71600, 1), (71600, 3),           # twin notes

(71850, 0),
    (72100, 2), (72100, 1),           # twin notes
    (72350, 3),
    (72600, 0),
    (72850, 1), (72850, 2),           # twin notes
    (73100, 3),
    (73350, 0),
    (73600, 2),
    (73850, 1), (73850, 3),           # twin notes
    (74100, 0),
    (74350, 2),
    (74600, 1), (74600, 0),           # twin notes
    (74850, 3),
    (75100, 2),
    (75350, 1),
    (75600, 0), (75600, 3),           # twin notes
    (75850, 2),
    (76100, 1),
    (76350, 0),
    (76600, 3), (76600, 2),           # twin notes
    (76850, 1),
    (77100, 0),
    (77350, 2),
    (77600, 3), (77600, 1),           # twin notes
    (77850, 0),
    (78100, 2),
    (78350, 3),
    (78600, 1), (78600, 0),           # twin notes
    (78850, 2),
    (79100, 3),
    (79350, 1),
    (79600, 0), (79600, 2),           # twin notes
    (79850, 3),

(80000, 1),
    (80200, 3), (80200, 0),           # twin notes on edges
    (80450, 2),
    (80700, 1),
    (80900, 0), (80900, 3),           # twin notes again edges
    (81150, 2),
    (81400, 1),
    (81650, 0),
    (81900, 1), (81900, 2), (81900, 3),  # triple notes burst
    (82200, 0),
    (82450, 2),
    (82700, 3),
    (82900, 1), (82900, 0),           # twin notes mix lanes
    (83150, 2),
    (83400, 3),
    (83650, 1),
    (83900, 0),
    (84150, 3), (84150, 2),           # twin notes near center
    (84400, 1),
    (84650, 0),
    (84900, 3),
    (85100, 2), (85100, 1),           # twins close lanes
    (85350, 0),
    (85600, 3),

 (85850, 1), (85850, 2), (85850, 0),  # triplet
    (86100, 3),
    (86350, 2), (86350, 1),
    (86600, 0), (86600, 3), (86600, 1),  # triplet, mixed lanes
    (86850, 2),
    (87100, 0),
    (87350, 3), (87350, 2),
    (87600, 1), (87600, 0), (87600, 3),  # triplet burst
    (87850, 2),
    (88100, 1),
    (88350, 0), (88350, 2),
    (88600, 3), (88600, 1), (88600, 0),  # triplet again
    (88850, 2),
    (89100, 3),
    (89350, 1), (89350, 0),
    (89600, 2), (89600, 3), (89600, 1),  # triplet
    (89850, 0),
    (90100, 2),

(90350, 1), (90350, 3), (90350, 0),  # triplet, wide spread
    (90600, 2),
    (90850, 1), (90850, 0),
    (91100, 3), (91100, 2), (91100, 1),  # triplet cluster
    (91350, 0),
    (91600, 2),
    (91850, 3), (91850, 1),
    (92100, 0), (92100, 2), (92100, 3),  # triplet with edge lanes
    (92350, 1),
    (92600, 0),
    (92850, 2), (92850, 3),
    (93100, 1), (93100, 0), (93100, 2),  # triplet again
    (93350, 3),
    (93600, 1),
    (93850, 0), (93850, 2),
    (94100, 3), (94100, 1), (94100, 0),  # triplet finish

(94350, 2), (94350, 0), (94350, 1),  # triplet, mixed lanes
    (94600, 3),
    (94850, 1), (94850, 2),
    (95100, 0), (95100, 3), (95100, 1),  # triplet cluster
    (95350, 2),
    (95600, 0),
    (95850, 3), (95850, 1),
    (96100, 2), (96100, 0), (96100, 3),  # triplet wide spread
    (96350, 1),
    (96600, 2),
    (96850, 0), (96850, 1),
    (97100, 3), (97100, 2), (97100, 0),  # triplet cluster again
    (97350, 1),
    (97600, 3),
    (97850, 2), (97850, 0),
    (98100, 1), (98100, 3), (98100, 2),  # triplet finish

(98350, 1), (98350, 2),
    (98600, 0),
    (98850, 2), (98850, 3),
    (99100, 1), (99100, 0),
    (99350, 3),
    (99600, 1), (99600, 2),
    (99850, 0),
    (100100, 2), (100100, 3),
    (100350, 1), (100350, 0),
    (100600, 3),
    (100850, 1), (100850, 2),
    (101100, 0),
    (101350, 2), (101350, 3),
    (101600, 1), (101600, 0),

(101850, 2), (101850, 3),
    (102100, 0),
    (102350, 1), (102350, 2),
    (102600, 3),
    (102850, 0), (102850, 1),
    (103100, 2),
    (103350, 1), (103350, 0),
    (103600, 3),
    (103850, 2), (103850, 3),
    (104100, 0),
    (104350, 1), (104350, 2),
    (104600, 3),
    (104850, 0), (104850, 1),
    (105100, 2),
    (105350, 1), (105350, 0),

(105600, 3),
    (105850, 2), (105850, 3),
    (106100, 0),
    (106350, 1), (106350, 2),
    (106600, 3),
    (106850, 0), (106850, 1),
    (107100, 2),
    (107350, 1), (107350, 0),
    (107600, 3),
    (107850, 2), (107850, 3),
    (108100, 0),
    (108350, 1), (108350, 2),
    (108600, 3),
    (108850, 0), (108850, 1),
    (109100, 2),
    (109350, 1), (109350, 0),
    (109600, 3),
    (109850, 2), (109850, 3),
    (110100, 0),
    (110350, 1), (110350, 2),
    (110600, 3),
    (110850, 0), (110850, 1),
    (111100, 2),
    (111350, 1), (111350, 0),
    (111600, 3),
    (111850, 2), (111850, 3),
    (112100, 0),
    (112350, 1), (112350, 2),
    (112600, 3),
    (112850, 0), (112850, 1),
    (113100, 2),
    (113350, 1), (113350, 0),
    (113600, 3),
    (113850, 2), (113850, 3),
    (114100, 0),
    (114350, 1), (114350, 2),
    (114600, 3),
    (114850, 0), (114850, 1),
    (115100, 2),
    (115350, 1), (115350, 0),
    (115600, 3),
    (115850, 2), (115850, 3),
    (116100, 0),
    (116350, 1), (116350, 2),
    (116600, 3),
    (116850, 0), (116850, 1),
    (117100, 2),
    (117350, 1), (117350, 0),
    (117600, 3),
    (117850, 2), (117850, 3),
    (118100, 0),
    (118350, 1), (118350, 2),
    (118600, 3),
    (118850, 0), (118850, 1),
    (119100, 2),
    (119350, 1), (119350, 0),
    (119600, 3),
    (119850, 2), (119850, 3),
    (120100, 0),
    (120350, 1), (120350, 2),
    (120600, 3),
    (120850, 0), (120850, 1),
    (121100, 2),
    (121350, 1), (121350, 0),
    (121600, 3),
    (121850, 2), (121850, 3),
    (122100, 0),
    (122350, 1), (122350, 2),
    (122600, 3),
    (122850, 0), (122850, 1),
    (123100, 2),
    (123350, 1), (123350, 0),
    (123600, 3),
    (123850, 2), (123850, 3),
    (124100, 0),
    (124350, 1), (124350, 2),
    (124600, 3),
    (124850, 0), (124850, 1),
    (125000, 2)
]

flowers_without_snow = [
    (1000, 0),
    (1800, 1),
    (2600, 2),
    (3400, 1),
    (4200, 0),
    (5000, 1), (5000, 2),  # single double here
    (5800, 1),
    (6600, 2),
    (7400, 1),
    (8200, 0),
    (9000, 1),
    (9800, 2),
    (10600, 1),
    (11400, 0),
    (12200, 1),
    (13000, 2),
    (13800, 1),
    (14600, 3),       # introducing lane 3 gently
    (15400, 2),
    (16200, 3),
    (17000, 1), (17000, 2),  # soft double note
    (17800, 0),
    (18600, 3),
    (19400, 1),
    (20200, 2),
    (21000, 3),
    (21800, 0),
    (22600, 1),
    (23400, 3),
    (24200, 2),
    (25000, 1),

    (25800, 2),
    (26600, 3),
    (27400, 1),
    (28200, 3),
    (29000, 2),
    (29800, 0),
    (30600, 1), (30600, 3),  # soft double note
    (31400, 2),
    (32200, 1),
    (33000, 3),
    (33800, 2),
    (34600, 0),
    (35400, 1),
    (36200, 3),
    (37000, 2),

    (37800, 3),
    (38600, 2),
    (39400, 1),
    (40200, 3),
    (41000, 2),
    (41800, 0),
    (42600, 1),
    (43400, 3),
    (44200, 2),
    (45000, 1),
    (45800, 0),
    (46600, 3),
    (47400, 2),
    (48200, 1),
    (49000, 3),

    (49800, 2),
    (50600, 3),
    (51400, 1),
    (52200, 2),
    (53000, 0),
    (53800, 1),
    (54600, 3),
    (55400, 2),
    (56200, 1),
    (57000, 0),
    (57800, 3),
    (58600, 2),
    (59400, 1),
    (60200, 0),
    (61000, 3),

    (61800, 1),
    (62600, 2),
    (63400, 3),
    (64200, 2),
    (65000, 1),
    (65800, 0),
    (66600, 1),
    (67400, 2),
    (68200, 3),
    (69000, 1),
    (69800, 0),
    (70600, 2),
    (71400, 3),
    (72200, 1),
    (73000, 0),

(73800, 2),
    (74600, 1),
    (75400, 0),
    (76200, 1),
    (77000, 2),
    (77800, 3),
    (78600, 2),
    (79400, 1),
    (80200, 0),
    (81000, 1),
    (81800, 3),
    (82600, 2),
    (83400, 1),
    (84200, 0),
    (85000, 1),
    (85800, 2),
    (86600, 1),
    (87400, 0),
    (88200, 1),
    (89000, 2),
    (89800, 3),
    (90600, 1),
    (91400, 0),
    (92200, 2),
    (93000, 1),
    (93800, 0),
    (94600, 1),
    (95400, 2),
    (96200, 3),
    (97000, 1),
    (97800, 0),
    (98600, 1),
    (99400, 2),

    # A few doubles for variation
    (99900, 1),
    (99900, 3),

(100200, 2),
    (100900, 1),
    (101600, 0),
    (102300, 1),
    (103000, 2),
    (103700, 3),
    (104400, 1),
    (105100, 0),
    (105800, 1),
    (106500, 2),
    (107200, 1),
    (107900, 0),
    (108600, 1),
    (109300, 2),
    (110000, 1),

    # A double to keep it interesting
    (110500, 0),
    (110500, 2),

    (111200, 1),
    (111900, 0),
    (112600, 1),
    (113300, 2),
    (114000, 3),
    (114700, 1),
    (115400, 0),
    (116100, 1),
    (116800, 2),
    (117500, 1),
    (118200, 0),
    (118900, 1),
    (119600, 2),

    # Another double
    (120200, 1),
    (120200, 3),

    (120900, 2),
    (121600, 1),
    (122300, 0),
    (123000, 1),
    (123700, 2),
    (124400, 1),
    (125100, 0),
    (125800, 1),
    (126500, 2),
    (127200, 3),
    (127900, 1),
    (128600, 0),
    (129300, 1),
    (130000, 2),

    (130700, 1),
    (131400, 2),
    (132100, 1),
    (132800, 0),
    (133500, 1),

    # Double notes
    (134200, 1),
    (134200, 3),

    (134900, 2),
    (135600, 1),
    (136300, 0),

    # Triplet-style quick notes (not simultaneous)
    (137000, 0),
    (137300, 1),
    (137600, 2),

    (138300, 1),

    # Double notes again
    (139000, 0),
    (139000, 2),

    (139700, 1),
    (140400, 3),

    # Some quick singles
    (141100, 2),
    (141800, 1),
    (142500, 0),

    # Another double for spice
    (143200, 1),
    (143200, 2),

    (143900, 3),
    (144600, 2),
    (145300, 1),

    # Triplet-like quick notes
    (146000, 1),
    (146300, 0),
    (146600, 1),

    (147300, 2),

    # Final doubles cluster
    (148000, 0),
    (148000, 3),
    (148700, 1),
    (149400, 2),
    (150000, 0),

   (150700, 1),
    (151400, 2),
    (152100, 1),
    (152800, 0),

    # Small double note for variation
    (153500, 0),
    (153500, 2),

    (154200, 1),
    (154900, 3),
    (155600, 2),

    # Triplet-ish flow
    (156300, 2),
    (156600, 1),
    (156900, 0),

    (157600, 1),
    (158300, 2),

    # Last double before ending
    (159000, 1),
    (159000, 3),

    (159700, 0),
    (160000, 1),

    (160700, 1),
    (161400, 2),
    (162100, 3),

    (162800, 2),

    # Double for a little challenge
    (163500, 1),
    (163500, 3),

    (164200, 0),
    (164900, 1),
    (165600, 2),

    # Triplet-style quick hits
    (166300, 2),
    (166600, 1),
    (166900, 0),

    (167600, 1),
    (168300, 2),

    # Final double pairs before closing
    (169000, 0),
    (169000, 2),

    (169700, 1),
    (170000, 3),

    (170600, 2),
    (171300, 3),

    (172000, 1),

    (172700, 0),
    (173400, 1),

    # Double notes for some spice
    (174100, 1),
    (174100, 2),

    (174800, 2),
    (175500, 3),

    (176200, 0),

    (176900, 1),
    (177600, 0),

    # Gentle triplet feel
    (178300, 0),
    (178600, 1),
    (178900, 2),

    (179600, 1),
    (180000, 3),
]

sparks = [
    (0, 0),
    (700, 1),
    (1400, 0),
    (2100, 2),
    (2800, 1),
    (3500, 3),
    (4200, 2),
    (4900, 0),
    (5600, 1),

    (6300, 1),
    (6300, 2),  # double hit

    (7000, 0),
    (7700, 3),
    (8400, 2),
    (9100, 1),
    (9800, 0),
    (10500, 1),

    (11200, 3),
    (11900, 2),

    (12600, 0),
    (13300, 1),

    (14000, 1),
    (14000, 2),  # double hit

    (14700, 3),
    (15400, 0),
    (16100, 1),
    (16800, 2),

    (17500, 2),
    (18200, 1),
    (18900, 3),
    (19600, 0),

    (20300, 1),
    (21000, 2),

    (21700, 0),
    (22400, 3),

    (23100, 1),
    (23800, 2),

    (24500, 1),
    (25200, 0),

    (25900, 2),
    (26600, 3),

    (27300, 0),
    (28000, 1),

    (28700, 2),
    (29400, 3),

    (30100, 0),
    (30800, 1),
    
    (31500, 2),
    (32200, 3),

    (32900, 1),
    (33600, 0),

    (34300, 2),
    (35000, 1),

    (35700, 3),
    (36400, 0),

    (37100, 2),
    (37800, 1),

    (38500, 0),
    (39200, 3),

    (39900, 2),
    (40600, 1),

    (42900, 0),
    (43150, 1),
    (43400, 0),
    (43700, 2),
    (43900, 1),
    (44100, 0),
    (44400, 1),
    (44600, 2),
    (44900, 1),
    (45100, 0),
    (45300, 2),
    (45500, 1),
    (45700, 0),
    (45900, 3),
    (46200, 0),
    (46500, 1),
    (46700, 3),
    (46900, 0),
    (47100, 2),

    (47300, 0),
    (47300, 2),  # double
    (47700, 1),
    (48000, 0),
    (48300, 1),

    (48600, 1),
    (48900, 0),
    (49150, 2),
    (49400, 1),
    (49600, 3),
    (49850, 1),
    (50100, 0),
    (50300, 2),
    (50500, 1),
    (50700, 0),
    (50900, 3),
    (51100, 1),
    (51300, 2),
    (51500, 0),
    (51700, 1),
    (51900, 2),
    (52100, 0),
    (52300, 1),
    (52500, 2),
    (52700, 0),
    (52900, 3),
    (53100, 1),
    (53300, 0),
    (53500, 2),
    (53700, 1),
    (53900, 3),

    (54100, 1),
    (54100, 3),  # double
    (54400, 0),
    (54700, 2),

    (55000, 1),
    (55250, 0),
    (55500, 2),
    (55750, 1),
    (56000, 3),
    (56250, 0),
    (56500, 2),
    (56750, 1),
    (57000, 0),
    (57250, 3),
    (57500, 1),
    (57750, 2),
    (58000, 0),
    (58250, 1),
    (58500, 2),
    (58750, 0),
    (59000, 1),
    (59250, 3),
    (59500, 0),
    (59750, 2),
    (60000, 1),

    (60200, 0),
    (60200, 1),
    (60200, 2),  # triple
    (60500, 3),
    (60750, 1),

(61000, 1),
    (61250, 3),
    (61500, 0),
    (61750, 2),
    (62000, 3),
    (62250, 1),
    (62500, 0),
    (62750, 2),
    (63000, 1),
    (63250, 0),
    (63500, 3),
    (63750, 2),
    (64000, 0),
    (64250, 3),
    (64500, 1),
    (64750, 2),
    (65000, 0),
    (65250, 1),
    (65500, 3),
    (65750, 2),
    (66000, 1),

    (66200, 0),
    (66200, 2),  # double
    (66500, 3),
    (66750, 0),

    (67000, 1),
    (67250, 3),
    (67500, 0),
    (67750, 2),
    (68000, 1),

    (68250, 3),
    (68500, 0),
    (68750, 2),
    (69000, 1),
    (69250, 3),

    (69500, 0),
    (69750, 2),
    (70000, 1),
    (70250, 3),
    (70500, 0),

    (70750, 2),
    (71000, 1),
    (71250, 3),
    (71500, 0),
    (71750, 2),

    (72000, 3),
    (72250, 1),
    (72500, 0),
    (72750, 2),
    (73000, 3),

    (73250, 1),
    (73500, 0),
    (73750, 2),
    (74000, 3),
    (74250, 1),

    (74500, 0),
    (74750, 2),
    (75000, 3),
    (75250, 1),
    (75500, 0),

    (75750, 2),
    (76000, 3),
    (76250, 1),
    (76500, 0),
    (76750, 2),

    (77000, 3),
    (77250, 1),
    (77500, 0),
    (77750, 3),
    (78000, 2),

    (78250, 0),
    (78500, 1),
    (78750, 3),
    (79000, 2),
    (79250, 0),

    (79500, 1),
    (79750, 3),
    (80000, 2),
    (80250, 0),
    (80500, 1),

    (80750, 3),
    (81000, 2),
    (81250, 0),
    (81500, 1),
    (81750, 3),

    (82000, 2),
    (82250, 0),
    (82500, 1),
    (82750, 3),
    (83000, 2),

    (83250, 0),
    (83500, 3),
    (83750, 1),
    (84000, 2),
    (84250, 0),

    (84500, 1),
    (84750, 3),
    (85000, 2),
    (85250, 0),
    (85500, 1),

    (85750, 3),
    (86000, 2),
    (86250, 0),
    (86500, 1),
    (86750, 3),

    (87000, 2),
    (87250, 0),
    (87500, 1),
    (87750, 3),
    (88000, 2),

    (88250, 0),
    (88500, 1),
    (88750, 3),
    (89000, 2),
    (89250, 0),

    (89500, 1),
    (89750, 2),
    (90000, 3),
    (90250, 0),
    (90500, 1),

    (90750, 2),
    (91000, 3),
    (91250, 0),
    (91500, 1),
    (91750, 2),

    (92000, 3),
    (92250, 0),
    (92500, 2),
    (92750, 1),
    (93000, 3),

    (93250, 0),
    (93500, 1),
    (93750, 2),
    (94000, 3),
    (94250, 0),

    (94500, 2),
    (94750, 1),
    (95000, 3),
    (95250, 0),
    (95500, 2),

    (95750, 1),
    (96000, 3),
    (96250, 0),
    (96500, 1),
    (96750, 2),

    (97000, 3),
    (97250, 0),
    (97500, 2),
    (97750, 1),
    (98000, 3),

    (98250, 0),
    (98500, 2),
    (98750, 1),
    (99000, 3),
    (99250, 0),

    (99500, 1),
    (99750, 2),
    (100000, 0),

(100250, 1),
    (100250, 3),  # double
    (100500, 0),
    (100750, 2),
    (101000, 1),
    (101250, 3),

    (101500, 0),
    (101750, 2),
    (102000, 1),
    (102250, 0),
    (102500, 3),
    
    (102750, 1),
    (102750, 2),  # double
    (103000, 0),
    (103250, 3),
    (103500, 1),

    (103750, 2),
    (104000, 0),
    (104250, 1),
    (104500, 3),
    (104750, 2),

    (105000, 0),
    (105250, 1),
    (105500, 3),
    (105750, 2),
    (106000, 0),

    (106250, 1),
    (106250, 2),  # double
    (106500, 3),
    (106750, 0),
    (107000, 1),

    (107250, 2),
    (107500, 3),
    (107750, 0),
    (108000, 1),
    (108250, 2),

    (108500, 3),
    (108750, 0),
    (109000, 1),
    (109250, 2),
    (109500, 0),

    (109750, 3),
    (109750, 1),  # double
    (110000, 2),
    (110250, 0),
    (110500, 3),

    (110750, 1),
    (111000, 2),
    (111250, 0),
    (111500, 1),
    (111750, 3),

    (112000, 2),
    (112250, 0),
    (112500, 1),
    (112750, 3),
    (113000, 2),

    (113250, 0),
    (113500, 1),
    (113750, 3),
    (114000, 0),
    (114250, 2),

    (114500, 1),
    (114750, 3),
    (115000, 0),
    (115250, 2),
    (115500, 1),

    (115750, 3),
    (116000, 0),
    (116250, 1),
    (116500, 2),
    (116750, 3),

(117000, 1),
    (117000, 3),  # double
    (117250, 0),
    (117500, 2),
    (117750, 1),

    (118000, 3),
    (118250, 0),
    (118500, 1),
    (118750, 2),
    (119000, 3),

    (119250, 0),
    (119500, 1),
    (119750, 2),
    (120000, 0),
    (120250, 3),

    (120500, 1),
    (120750, 2),
    (121000, 0),
    (121250, 1),
    (121500, 3),

    (121750, 2),
    (122000, 0),
    (122250, 1),
    (122500, 3),
    (122750, 2),

    (123000, 0),
    (123000, 1),
    (123250, 3),  # triple cluster starts
    (123250, 2),
    (123250, 0),

    (123500, 1),
    (123750, 2),
    (124000, 0),
    (124250, 3),
    (124500, 1),

    (124750, 2),
    (125000, 0),
    (125250, 1),
    (125500, 3),
    (125750, 2),

(126000, 1),
    (126000, 2),  # double
    (126250, 0),
    (126500, 3),
    (126750, 1),

    (127000, 2),
    (127250, 0),
    (127500, 3),
    (127750, 1),
    (128000, 2),

    (128250, 0),
    (128500, 3),
    (128750, 1),
    (129000, 2),
    (129250, 0),

    (129500, 1),
    (129750, 3),
    (130000, 0),
    (130250, 2),
    (130500, 1),

    (130750, 3),
    (131000, 0),
    (131250, 2),
    (131500, 1),
    (131750, 3),

    (132000, 0),
    (132000, 1),
    (132250, 2),  # triple cluster
    (132250, 3),
    (132250, 0),

    (132500, 1),
    (132750, 2),
    (133000, 3),
    (133250, 0),
    (133500, 1),

    (133750, 2),
    (134000, 3),
    (134250, 0),
    (134500, 1),
    (134750, 2),

    (135000, 3),
    (135250, 1),
    (135500, 0),
    (135750, 2),
    (136000, 3),

    (136250, 0),
    (136500, 1),
    (136750, 2),
    (137000, 3),
    (137250, 0),

    (137500, 1),
    (137750, 2),
    (138000, 3),
    (138250, 0),
    (138500, 1),

    (138750, 2),
    (139000, 3),
    (139250, 1),
    (139500, 0),
    (139750, 2),
]

wrapmeinplastic = [
    (0, 1),
    (500, 2),
    (1000, 1),
    (1500, 0),
    (2000, 1),
    (2500, 3),

    (3000, 1),
    (3500, 2),
    (4000, 0),
    (4500, 1),
    (5000, 0),
    (5500, 2),

    (6000, 0),
    (6500, 1),
    (7000, 3),
    (7500, 0),
    (8000, 2),
    (8500, 1),

    (9000, 2),
    (9000, 3),  # double

    (9500, 1),
    (10000, 2),
    (10500, 0),
    (11000, 2),

    (11500, 1),
    (12000, 3),
    (12500, 0),
    (13000, 1),

    (13500, 2),
    (14000, 0),
    (14500, 3),
    (15000, 1),
    (15500, 2),
    (16000, 0),

    (16500, 1),
    (17000, 2),
    (17500, 3),
    (18000, 1),
    (18500, 0),

    (19000, 2),
    (19500, 3),
    (20000, 1),
    (20500, 2),

    (21000, 0),
    (21500, 1),
    (22000, 2),
    (22500, 3),

    (23000, 0),
    (23500, 1),
    (24000, 2),
    (24500, 0),

    (25000, 1),
    (25500, 2),
    (26000, 3),
    (26500, 1),
    (27000, 0),

    (27500, 2),
    (28000, 1),
    (28500, 3),
    (29000, 2),
    (29500, 0),

    (30000, 0),
    (30000, 2),
    
    (30500, 1),
    (31000, 0),
    (31000, 3),

    (31500, 1),
    (32000, 2),
    (32000, 3),

    (32500, 0),
    (33000, 1),
    (33500, 2),
    (33500, 3),

    (34000, 1),
    (34500, 0),
    (34500, 2),
    (35000, 3),

    (35500, 0),
    (36000, 1),
    (36000, 2),

    (36500, 3),
    (37000, 0),
    (37000, 2),

    (37500, 1),
    (38000, 2),
    (38000, 3),

    (38500, 0),
    (39000, 1),
    (39500, 2),
    (39500, 3),

    (40000, 1),
    (40500, 0),
    (40500, 3),
    (41000, 2),

    (41500, 0),
    (42000, 1),
    (42000, 2),

    (42500, 3),
    (43000, 0),
    (43000, 2),

    (43500, 1),
    (44000, 2),
    (44000, 3),

    (44500, 0),
    (45000, 1),
    (45500, 2),
    (45500, 3),

    (46000, 1),
    (46500, 0),
    (46500, 3),
    (47000, 2),

    (47500, 1),
    (48000, 0),
    (48000, 2),

    (48500, 3),
    (49000, 1),
    (49500, 0),
    (49500, 2),

    (50000, 1),
    (50500, 2),
    (51000, 0),
    (51000, 3),

    (51500, 1),
    (52000, 2),
    (52500, 0),
    (52500, 3),

    (53000, 1),
    (53500, 2),
    (54000, 3),

    (54500, 0),
    (55000, 1),
    (55000, 3),
    (55500, 2),
    (56000, 0),
    (56000, 1),

    (56500, 3),
    (57000, 1),
    (57500, 0),
    (58000, 2),
    (58000, 3),

    (58500, 1),
    (59000, 0),
    (59000, 2),
    (59500, 3),

    (60000, 0),
    (60000, 1),
    (60500, 2),

    (61000, 1),
    (61500, 0),
    (61500, 3),

    (62000, 2),
    (62500, 1),
    (62500, 3),

    (63000, 0),
    (63500, 1),
    (64000, 2),
    (64000, 3),

    (64500, 0),
    (65000, 1),
    (65000, 2),

    (65500, 3),
    (66000, 0),
    (66000, 2),

    (66500, 1),
    (67000, 3),
    (67500, 0),
    (67500, 1),

    (68000, 1),
    (68500, 0),
    (68500, 2),

    (69000, 1),
    (69500, 3),
    (70000, 0),
    (70000, 2),

    (70500, 1),
    (71000, 3),
    (71000, 0),

    (71500, 2),
    (72000, 1),
    (72500, 3),
    (72500, 0),

    (73000, 2),
    (73500, 1),
    (74000, 0),
    (74000, 3),

    (74500, 2),
    (75000, 1),
    (75000, 0),
    (75500, 3),
    (76000, 2),

    (76500, 1),
    (77200, 0),

    (78000, 2),

    (78800, 1),
    (79500, 3),

    (80300, 0),

    (81000, 2),

    (81800, 1),

    (82500, 3),

    (83200, 0),

    (84000, 2),

    (84800, 1),

    (85200, 0), 
    (85450, 2),

    (86000, 1),
    (86250, 3),

    (86800, 0),
    (86800, 2),  # double note

    (87500, 1),

    (88000, 2),
    (88200, 3),

    (88700, 0),
    (88900, 1),

    (89400, 2),  # double note
    (89400, 3),

    (90000, 0),
    (90200, 1),

    (90700, 3),
    (91000, 2),

    (91500, 0),
    (91800, 1),

    (92200, 1),
    (92500, 0),
    (92750, 2),

    (93000, 1),  # double note
    (93000, 3),

    (93500, 0),
    (93700, 2),
    (93900, 1),

    (94200, 3),
    (94500, 0),
    (94700, 2),

    (95000, 1),  # double note
    (95000, 2),

    (95500, 0),
    (95800, 3),
    (96000, 1),

    (96300, 2),
    (96500, 0),
    (96800, 3),

    (97100, 1),  # double note
    (97100, 2), 

    (97500, 0),
    (97800, 3),
    (98000, 1),

    (98200, 2),
    (98500, 1),  # double note
    (98500, 3),

    (98900, 0),
    (99100, 2),
    (99300, 1),

    (99600, 3),
    (99800, 0),  # double note
    (99800, 2),

    (100100, 1),
    (100300, 3),
    (100500, 0),

    (100700, 1),  # double note
    (100700, 2),

    (101000, 3),
    (101200, 0),
    (101400, 1),

    (101700, 3),  # double note
    (101700, 2),

    (102000, 0),
]

hightide = [
    (0, 0),
    (1200, 0),
    (2400, 1),
    (3600, 1),
    (4800, 2),
    (6000, 2),

    (7200, 1),
    (8400, 1),
    (9600, 0), (9600, 1), 
    (10800, 0),(10800, 2),

    (12000, 2),
    (13200, 2),
    (14400, 3),

    # Small double notes to add some interest
    (15600, 1),
    (15600, 3),
    (16800, 0),
    (18000, 1),

    (19200, 2),
    (20400, 2),
    (20400, 3),
    (21600, 1),

    (22800, 0),
    (24000, 0),
    (24000, 2),

    (25200, 1),
    (26400, 3),
    (27600, 2),

    # Ending this section with a simple single note
    (28800, 0),

    (30000, 1),
    (31200, 2),
    (32400, 1),
    (32400, 3),  # simultaneous double notes as two separate entries
    (33600, 0),

    (33600, 0),
    (33600, 2),  # double notes

    (33900, 1),
    (34200, 2),

    (34500, 1),
    (34800, 3),

    (35100, 3),
    (35400, 0),

    (35700, 2),
    (36000, 1),

    (36300, 0),

    (36600, 2),
    (36900, 1),
    (37200, 3),

    (37500, 2),

    (37800, 0),
    (38100, 3),
    (38100, 0),  # double notes

    (38400, 1),

    (38700, 1),
    (39000, 2),

    (39300, 2),

    (39600, 3),

    (39900, 3),

    (40200, 0),

    (40500, 0),
    (40500, 1),  # double notes

    (40800, 2),

    (41100, 3),

    (41400, 1),

    (41700, 3),

    (42000, 1),
    (42300, 2),  # double notes

    (42600, 0),

    (42900, 3),

    (43200, 1),
    (43500, 2),  # double notes

    (43800, 0),

    (43800, 1),
    (44100, 2),
    (44400, 1),
    (44700, 3),
    (45000, 2),
    (45000, 0),  # double note here
    (45300, 1),
    (45600, 0),
    (45900, 2),
    (46200, 3),
    (46500, 1),
    (46800, 2),
    (47100, 0),
    (47400, 1),
    (47700, 3),
    (48000, 1),
    (48300, 2),
    (48600, 0),
    (48900, 2),
    (49200, 3),
    (49500, 1),
    (49800, 0),
    (50100, 1),
    (50400, 2),
    (50700, 0),
    (51000, 3),

    (51000, 3),
    (51300, 1),
    (51600, 0),
    (51900, 2),
    (52200, 1),
    (52500, 3),
    (52800, 0),
    (53100, 2),
    (53400, 1),
    (53700, 0),
    (54000, 2),
    (54300, 3),
    (54600, 1),
    (54900, 0),
    (55200, 2),
    (55500, 1),
    (55800, 3),
    (56100, 0),
    (56400, 2),
    (56700, 1),
    (57000, 0),
    (57300, 3),
    (57600, 2),
    (57900, 1),
    (58200, 0),
    (58500, 3),
    (58800, 2),
    (59100, 1),
    (59400, 0),
    (59700, 3),
    (60000, 1),
    (60300, 2),
    (60600, 0),
    (60900, 1),
    (61200, 3),
    (61500, 2),
    (61800, 0),
    (62100, 1),
    (62400, 3),
    (62700, 2),
    (63000, 0),
    (63300, 1),
    (63600, 2),
    (63900, 3),
    (64200, 0),
    (64500, 1),
    (64800, 2),
    (65100, 3),
    (65400, 0),
    (65700, 1),
    (66000, 2),
    (66300, 0),
    (66600, 3),
    (66900, 1),
    (67200, 2),
    (67500, 0),
    (67800, 3),
    (68100, 1),
    (68400, 2),
    (68700, 0),
    (69000, 1),
    (69300, 3),
    (69600, 2),
    (69900, 0),
    (70200, 1),

    (70200, 1),
    (70500, 2),
    (70800, 0),
    (71100, 3),
    (71400, 1),
    (71700, 2),
    (72000, 0),
    (72300, 1),

    (75300, 1),
    (75900, 0),
    (76500, 2),
    (77100, 1),
    (77700, 3),
    (78300, 0),
    (78900, 1),
    (79500, 2),
    (80100, 0),
    (80700, 1),
    (81300, 2),
    (81900, 3),
    (82500, 1),
    (83100, 0),
    (83700, 2),
    (84300, 1),
    (84900, 3),
    (85500, 0),
    (86100, 1),
    (86700, 2),
    (87300, 0),
    (87900, 1),
    (88500, 2),
    (89100, 3),
    (89700, 1),
    (90300, 0),
    (90900, 2),
    (91500, 1),
    (92100, 3),
    (92700, 0),
    (93300, 1),
    (93900, 2),
    (94500, 0),
    (95100, 1),
    (95700, 2),
    (96300, 3),
    (96900, 1),
    (97500, 0),
    (98100, 2),
    (98700, 1),
    (99300, 3),
    (99900, 0),
    # A few doubles spaced out:
    (100000, 1),
    (100000, 2),

(100500, 0),
    (101000, 2),
    (101200, 1),
    (101400, 3),
    (101700, 0),
    (102000, 1),
    (102000, 2),  # double
    (102300, 3),
    (102500, 1),
    (102700, 2),
    (103000, 0),
    (103100, 1),
    (103300, 2),
    (103500, 3),
    (103700, 0),
    (103900, 1),
    (104200, 2),
    (104400, 3),
    (104600, 1),
    (104800, 0),
    (105000, 0),
    (105000, 1),
    (105000, 2),
    (105000, 3),  
]

itsokaynow = [
    (0, 1),
    (400, 0),
    (500, 2),
    (900, 1),
    (1000, 0),
    (1400, 3),
    (1500, 2),
    (1900, 1),
    (2000, 3),
    (2400, 2),
    (2500, 0),
    (2900, 1),
    (3000, 3),
    (3400, 0),
    (3500, 2),
    (3900, 1),
    (4000, 3),
    (4400, 2),
    (4500, 0),

    (5300, 1),
    (5500, 3),
    (5900, 2),
    (6000, 0),
    (6400, 1),
    (6500, 3),
    (6900, 0),
    (7000, 2),
    (7400, 1),
    (7500, 3),
    (7900, 2),
    (8000, 0),
    (8400, 1),
    (8500, 3),
    (8900, 0),
    (9000, 2),
    (9400, 1),
    (9500, 3),

    (10800, 0),
    (11000, 2),
    (11400, 3),
    (11500, 1),
    (11900, 0),
    (12000, 2),
    (12400, 3),
    (12500, 1),
    (12900, 0),
    (13000, 2),
    (13400, 3),
    (13500, 1),

    (16000, 2),
    (16500, 0),
    (17000, 3),
    (17500, 1),
    (18000, 2),
    (18500, 0),
    (19000, 3),
    (19500, 1),
    (20000, 2),
    (20500, 0),
    (21000, 3),

    (21500, 1),
    (22300, 0),
    (23100, 2),
    (23900, 3),
    (24700, 1),
    (25500, 0),
    (26300, 2),
    (27100, 3),
    (27900, 1),
    (28700, 0),
    (29500, 2),
    (30300, 3),
    (31100, 1),
    (31900, 0),
    (32700, 2),

    (32700, 0),
    (32950, 3),  # double
    (33200, 1),
    (33450, 0),  # double
    (33700, 2),
    (33900, 1),
    (34100, 3),  # triple start
    (34100, 0),
    (34350, 2),
    (34600, 1),  # double
    (34850, 3),
    (35100, 0),  # double
    (35300, 2),
    (35550, 1),
    (35800, 0),  # triple start
    (35800, 2),
    (35800, 3),
    (36050, 1),
    (36300, 0),  # double
    (36550, 2),
    (36800, 3),

    (37050, 1),
    (37300, 0),  # double
    (37300, 2),
    (37550, 3),
    (37800, 1),  # double
    (38050, 2),
    (38300, 0),
    (38550, 1),  # triple start
    (38550, 2),
    (38550, 3),
    (38800, 0),
    (39050, 2),  # double
    (39300, 1),
    (39550, 3),
    (39800, 0),  # double
    (39800, 1),
    (40050, 2),
    (40300, 3),  # double
    (40300, 0),
    (40550, 1),
    (40800, 2),
    (41050, 1),  # double
    (41050, 3),
    (41300, 0),
    (41550, 2),  # triple start
    (41550, 1),
    (41550, 3),
    (41800, 0),
    (42050, 2),  # double
    (42300, 1),
    (42550, 3),
    (42800, 0),  # double
    (42800, 1),
    (43050, 2),
    (43300, 3),  # triple start
    (43300, 1),
    (43300, 0),
    (43550, 2),
    (43800, 1),  # double

    (44500, 1),
    (44500, 3),
    (45500, 2),
    (46000, 0),  # double
    (46000, 3),
    (46500, 1),
    (47000, 2),
    (47500, 3),  # double
    (47500, 0),
    (48000, 1),
    (48500, 2),
    (49000, 0),  # double
    (49000, 3),
    (49500, 1),
    (50000, 2),
    (50500, 3),  # double
    (50500, 0),

    (52000, 2),
    (52500, 1),  # double
    (52500, 3),
    (53000, 0),
    (53500, 2),
    (54000, 1),
    (54500, 3),  # double
    (54500, 0),
    (55000, 2),
    (55500, 1),
    (56000, 3),
    (56500, 0),  # double
    (56500, 2),
    (57000, 1),
    (57500, 3),
    (58000, 0),

    (58000, 1),
    (58500, 2),  # double
    (58500, 3),
    (59000, 0),
    (59500, 1),
    (60000, 2),
    (60500, 3),  # triple
    (60500, 0),
    (60500, 1),
    (61000, 2),
    (61500, 3),
    (62000, 0),
    (62500, 1),  # double
    (62500, 2),
    (63000, 3),
    (63500, 0),
    (64000, 1),
    (64500, 2),
    (65000, 3),

    (65500, 0),
    (66000, 1),  # double
    (66000, 2),
    (66500, 3),
    (67000, 0),
    (67500, 1),
    (68000, 2),  # triple
    (68000, 3),
    (68000, 0),
    (68500, 1),
    (69000, 2),
    (69500, 3),
    (69900, 0),

    (70000, 1),
    (70500, 2),
    (71000, 3),
    (71500, 1),  # double
    (71500, 0),
    (72000, 2),
    (72500, 3),
    (73000, 1),
    (73500, 2),  # triple
    (73500, 3),
    (73500, 0),
    (74000, 1),
    (74500, 2),

    (75000, 0),
    (75500, 1),
    (76000, 2),
    (76500, 3),
    (77000, 1),
    (77500, 0),  # double
    (77500, 2),
    (78000, 3),
    (78500, 1),
    (79000, 0),  # triple
    (79000, 2),
    (79000, 3),
    (79500, 1),
    (80000, 2),

    (80500, 0),
    (81000, 1),
    (81500, 3),
    (82000, 2),
    (82500, 1),
    (83000, 0),  # double
    (83000, 3),
    (83500, 2),
    (84000, 1),
    (84500, 0),
    (85000, 2),  # triple
    (85000, 1),
    (85000, 3),

    (85500, 1),
    (86000, 0),
    (86500, 2),
    (87000, 3),
    (87500, 1),
    (88000, 0),
    (88500, 2),
    (89000, 1),  # double
    (89000, 3),
    (89500, 0),
    (90000, 2),

    (90500, 1),
    (91000, 0),
    (91500, 2),
    (92000, 3),
    (92500, 1),
    (93000, 0),
    (93500, 1),
    (94000, 2),
    (94500, 0),  # double
    (94500, 3),
    (95000, 1),
    (95500, 2),
    (96000, 0),
    (96500, 3),
    (97000, 1),

    (97500, 2),
    (98000, 0),
    (98500, 1),
    (99000, 2),   # double
    (99000, 3),
    (99500, 0),
    (100000, 1),
    (100500, 3),
    (101000, 0),
    (101500, 2),  # triple
    (101500, 1),
    (101500, 3),
    (102000, 0),
    (102500, 1),
    (103000, 2),
    (103500, 3),
    (104000, 1),  # double
    (104000, 2),
    (104500, 0),
    (105000, 3),

    (105500, 1),
    (106500, 0),
    (107500, 2),
    (108500, 1),   # double, gentle
    (108500, 3),
    (109500, 0),
    (110500, 2),
    (111500, 1),
    (111500, 3),
]

psycho = [
    (2800, 1),
    (4000, 2),
    (5200, 0),
    (6400, 1),
    (7600, 3),
    (8800, 2),
    (10000, 1),
    (11200, 0),
    (12400, 3),
    (13600, 2),
    (14800, 1),
    (16000, 0),
    (17200, 2),
    (17800, 0),
    (18400, 3),
    (19000, 1),
    (19600, 2),
    (20200, 0),
    (20800, 3),
    (21400, 1),
    (22000, 2),
    (22600, 0),
    (23200, 3),
    (23800, 1),
    (24400, 2),
    (25000, 0),
    (25600, 3),
    (26200, 1),
    (26800, 2),
    (27400, 0),
    (28000, 3),

(30000, 0),
    (30000, 2),  # double

    (30600, 1),
    (31200, 3),

    (31800, 0),
    (31800, 1),  # double

    (32400, 2),
    (33000, 3),

    (33600, 1),
    (33600, 2),  # double

    (34200, 0),
    (34800, 3),

    (35400, 1),
    (35400, 3),  # double

    (36000, 0),
    (36600, 2),

    (37200, 1),
    (37800, 3),

    (38400, 0),
    (38400, 2),  # double

    (39000, 1),
    (39600, 3),

    (40200, 0),
    (40800, 2),  # double

    (41400, 1),
    (42000, 3),

    (42600, 0),
    (42600, 3),  # double

    (44450, 0),
    (44450, 2),
    (44450, 3),  # triple

    (45100, 1),
    (45100, 2),
    (45100, 3),  # triple

    (45750, 0),
    (45750, 1),
    (45750, 3),  # triple

    (46400, 0),
    (46400, 2),
    (46400, 3),  # triple

    (47050, 1),
    (47050, 2),
    (47050, 3),  # triple

    (49000, 0),
    (49000, 1),  # double

    (49600, 2),
    (49600, 3),  # double

    (50250, 0),
    (50250, 2),
    (50250, 3),  # triple

    (50900, 1),
    (50900, 3),  # double

    (51550, 0),
    (51550, 1),
    (51550, 2),  # triple

    (52200, 1),
    (52200, 2),  # double

    (52850, 0),
    (52850, 2),
    (52850, 3),  # triple

    (53500, 0),
    (53500, 1),  # double

    (54050, 2),
    (54050, 3),  # double

    (54600, 0),
    (54600, 1),
    (54600, 3),  # triple

    (55150, 1),
    (55150, 2),  # double

    (55700, 0),
    (55700, 2),
    (55700, 3),  # triple

    (56250, 0),

    (56700, 1),
    (56700, 2),  # double

    (57250, 0),
    (57250, 1),
    (57250, 3),  # triple

    (58500, 0),
    (58500, 2),          # double

    (59000, 1),

    (59300, 1),
    (59300, 3),          # double

    (59700, 0),
    (59700, 1),
    (59700, 2),          # triple

    (60200, 3),

    (60600, 0),
    (60600, 2),          # double

    (61050, 1),

    (61500, 1),
    (61500, 3),          # double

    (61950, 0),
    (61950, 2),
    (61950, 3),          # triple

    (62400, 1),

    (62850, 0),
    (62850, 1),          # double

    (63300, 2),

    (63700, 1),
    (63700, 3),          # double

    (64150, 0),
    (64150, 1),
    (64150, 2),          # triple

    (64600, 3),

    (65050, 1),

    (65500, 0),
    (65500, 2),          # double

    (65950, 1),

    (66400, 1),
    (66400, 3),          # double

    (66850, 0),
    (66850, 1),
    (66850, 3),          # triple

    (67300, 2),

    (67750, 0),
    (67750, 2),          # double

    (68200, 1),

    (68650, 1),
    (68650, 3),          # double

    (69100, 0),
    (69100, 1),
    (69100, 2),          # triple

    (69550, 3),

    (70000, 0),
    (70000, 1),          # double

    (70450, 2),

    (70900, 1),
    (70900, 3),          # double

    (71350, 0),
    (71350, 2),
    (71350, 3),          # triple

    (71800, 1),

(72250, 0),

    (72700, 1),
    (72700, 3),          # double

    (73150, 2),

    (73600, 0),
    (73600, 1),
    (73600, 3),          # triple

    (74050, 2),

    (74500, 1),
    (74500, 3),          # double

    (74950, 0),

    (75400, 0),
    (75400, 2),          # double

    (75850, 1),

    (76300, 1),
    (76300, 3),          # double

    (76750, 0),
    (76750, 1),
    (76750, 2),          # triple

    (77200, 3),

    (77650, 0),
    (77650, 2),          # double

    (78100, 1),

    (78550, 1),
    (78550, 3),          # double

    (79000, 0),
    (79000, 2),
    (79000, 3),          # triple

    (79450, 1),

    (79900, 0),

    (80350, 1),
    (80350, 3),          # double

    (80800, 2),

    (81250, 0),
    (81250, 1),
    (81250, 3),          # triple

    (81700, 2),

    (82150, 1),
    (82150, 3),          # double

    (82600, 0),

    (83050, 0),
    (83050, 2),          # double

    (83500, 1),

    (83950, 1),
    (83950, 3),          # double

    (84400, 0),
    (84400, 1),
    (84400, 2),          # triple

    (84850, 3),

    (85300, 0),
    (85300, 2),          # double

    (85750, 1),

    (86200, 1),
    (86200, 3),          # double

]

riseup = [
    (0, 0),
    (1200, 1),
    (2400, 2),

    (3600, 0),
    (4800, 1),
    (6000, 2),

    (7200, 1),
    (8400, 0),
    (9600, 1),

    (10800, 2),

    (11400, 0),
    (12000, 1),
    (12600, 0),
    (12600, 1),
    (13200, 2),
    (13800, 1),
    (14400, 0),
    (15000, 1),
    (15000, 2),
    (15600, 0),
    (16200, 1),
    (16800, 2),
    (17400, 0),
    (17400, 2),
    (18000, 1),
    (18600, 0),
    (19200, 1),
    (19800, 2),
    (20400, 1),
    (21000, 0),
    (21000, 1),
    (21600, 2),
    (22200, 1),
    (22800, 0),
    (23400, 1),
    (23400, 2),
    (24000, 0),
    
    (24600, 1),
    (25200, 2),
    (25800, 0),
    (26400, 1),
    (27000, 0),
    (27000, 2),
    (27600, 1),
    (28200, 0),
    (28800, 1),
    (29400, 2),
    (30000, 0),
    (30000, 1),
    (30600, 2),

    (31200, 1),
    (31800, 0),
    (32400, 1),
    (33000, 2),
    (33600, 1),
    (34200, 0),
    (34800, 1),
    (35400, 2),
    (36000, 0),
    (36600, 1),
    (37200, 0),
    (37800, 1),
    (38400, 2),
    (39000, 0),
    (39600, 1),
    (40200, 2),
    (40800, 1),
    (41400, 0),

    (42000, 1),
    (42600, 2),
    (43200, 1),
    (43800, 0),
    (44400, 1),
    (45000, 2),
    (45600, 1),
    (46200, 0),
    (46800, 1),
    (47400, 2),
    (48000, 0),
    (48600, 1),
    (49200, 2),

    (50500, 0),
    (51300, 1),
    (51600, 2),

    (51700, 0),
    (51700, 1),  # double

    (52300, 1),
    (52600, 2),

    (53200, 0),
    (53200, 2),  # double

    (53800, 1),
    (54100, 0),
    (54400, 2),  # triple start
    (54400, 1),
    (54400, 0),

    (55000, 2),
    (55300, 1),

    (55900, 0),
    (55900, 1),  # double

    (56500, 1),
    (56800, 2),

    (57400, 0),
    (57400, 2),  # double

    (58000, 0),
    (58300, 1),
    (58600, 2),  # triple
    (58600, 1),
    (58600, 0),

    (59200, 1),
    (59500, 2),

    (60100, 0),
    (60100, 1),  # double

    (60700, 1),
    (61000, 2),

    (61600, 0),
    (61600, 1),  # double

    (62200, 1),
    (62500, 2),

    (63100, 0),
    (63100, 2),  # double

    (63700, 1),
    (64000, 0),
    (64300, 2),  # triple start
    (64300, 1),
    (64300, 0),

    (64900, 2),
    (65200, 1),

    (65800, 0),
    (65800, 1),  # double

    (66400, 1),
    (66700, 2),

    (67300, 0),
    (67300, 2),  # double

    (67900, 0),
    (68200, 1),
    (68500, 2),  # triple
    (68500, 1),
    (68500, 0),

    (69100, 1),
    (69400, 2),

    (70000, 0),
    (70000, 1),  # double

(70600, 0),
    (70900, 1),

    (71500, 1),
    (71800, 2),

    (72400, 0),
    (72400, 1),  # double

    (73000, 1),
    (73300, 0),

    (73900, 2),
    (74200, 1),

    (74800, 0),

    (75400, 1),
    (75700, 2),

    (76300, 0),
    (76600, 1),
    (76900, 2),

    (77500, 0),
    (77500, 1),  # double

    (78100, 2),

    (78700, 1),
    (79000, 0),

    (79600, 1),
    (79900, 2),

    (80500, 0),

    (81100, 1),
    (81400, 2),

    (82000, 0),
    (82300, 1),

    (82900, 1),
    (82900, 2),  # double

    (83500, 0),

    (84100, 1),
    (84400, 0),

    (85000, 2),
    (85300, 1),

    (85900, 0),

    (86500, 1),
    (86800, 2),

    (87400, 0),
    (87700, 1),

    (88300, 0),
    (88300, 2),  # double

    (88900, 1),

    (89500, 0),
    (89800, 1),

    (90400, 2),

    (91000, 1),
    (91300, 0),

    (91900, 1),
    (92200, 2),

    (92800, 0),
    (93100, 1),

    (93700, 0),

    (94300, 1),
    (94600, 2),

    (95200, 0),
    (95500, 1),

    (96100, 1),
    (96100, 2),  # double

    (96700, 0),

    (97300, 1),
    (97600, 0),

    (98200, 2),
    (98500, 1),

    (99100, 0),

    (99700, 1),
    (100000, 2),

    (100600, 0),
    (100900, 1),

    (101500, 1),
    (101800, 2),

    (102400, 0),
    (102400, 1),  # double

    (103000, 2),

    (103600, 1),
    (103900, 0),

    (104500, 2),

    (105100, 1),
    (105400, 2),

    (106000, 0),
    (106000, 2),  # double

    (106600, 1),

    (107200, 0),
    (107500, 1),

    (108100, 2),
]

# SONG SPEEDS
song_speeds = {
    "music/LionHeart.mp3": 0.4,
    "music/Suki.mp3": 0.35,
    "music/As Wished.mp3": 0.4,
    "music/Chimera.mp3": 0.5,
    "music/Flowers without snow.mp3": 0.3, 
    "music/SPARKS.mp3": 0.4,
    "music/Wrap me in plastic.mp3": 0.35,
    "music/High Tide.mp3": 0.35,
    "music/It's Okay Now.mp3": 0.5,
    "music/Psycho.mp3": 0.45,
    "music/RISE UP.mp3": 0.5
}

# MUSIC ALBUM COVER
covers = [
    ("Lionheart", "music/LionHeart.mp3", "covers/lionheart_cover.jpg"),
    ("Suki", "music/Suki.mp3", "covers/suki_cover.jpeg"),
    ("如願", "music/As Wished.mp3", "covers/suki_cover.jpg"),
    ("キメラ", "music/Chimera.mp3", "covers/chimera_cover.jpg"),
    ("Flowers without snow", "music/Flowers without snow.mp3", "covers/flowers_without_snow_cover.jpeg"),
    ("SPARKS", "music/SPARKS.mp3", "covers/SPARKS_cover.jpg"),
    ("Wrap me in plastic", "music/Wrap me in plastic.mp3", "covers/wrap me in plastic cover.jpg"),
    ("High Tide", "music/High Tide.mp3", "covers/high tide.jpeg"),
    ("its okay now", "music/It's Okay Now.mp3", "covers/it's okay now cover.jpeg"),
    ("Psycho", "music/Psycho.mp3", "covers/psycho_cover.jpg"),
    ("RISE UP", "music/RISE UP.mp3", "covers/rise up.jpg")
]
# Dictionary mapping song file paths to their note maps
song_maps = {
    "music/LionHeart.mp3": lionHeart,
    "music/Suki.mp3": suki,
    "music/As Wished.mp3": as_wished,
    "music/Chimera.mp3": chimera,
    "music/Flowers without snow.mp3": flowers_without_snow,
    "music/SPARKS.mp3": sparks,
    "music/Wrap me in plastic.mp3": wrapmeinplastic,
    "music/High Tide.mp3": hightide,
    "music/It's Okay Now.mp3": itsokaynow,
    "music/Psycho.mp3": psycho,
    "music/RISE UP.mp3": riseup
}

def drawArea(surface, x, y, width, height, colour):
    screen_rect = pygame.Rect(x, y, width, height)
    pygame.draw.rect(surface, colour, screen_rect)

def draw_lanes(surface, lanes, pos):
    for lane_x in lanes:
        pygame.draw.circle(surface, BLACK, (int(lane_x + CIRCLE_OFFSET), int(pos)), CIRCLE_RADIUS, 2)

def showPoints(screen, points, colour):
    font = pygame.font.SysFont("Arial", 24)
    points_txt = font.render(f"Points: {points}", True, colour)
    screen.blit(points_txt, (10, 10))

def draw_flash(surface, flash_timers, lanes):
    for i, timer in enumerate(flash_timers):
        if timer > 0:
            flash_surf = pygame.Surface((FLASH_WIDTH, FLASH_HEIGHT), pygame.SRCALPHA)
            flash_surf.fill(FLASH_COLOUR)
            lane_center_x = lanes[i] + CIRCLE_OFFSET
            surface.blit(flash_surf, (int(lane_center_x - FLASH_WIDTH / 2), 0))

def update_notes(notes, dt, points, combo, multiplier, sounds):
    for note in notes[:]:
        note.fall(dt)
        if note.hit_colour is not None:
            if note.hit_timer <= 0:
                notes.remove(note)
            continue

        if note.y > HIT_Y + MISS_MARGIN:
            # play error
            if multiplier >= 2:
                sounds[4].play()
            points += MISS
            note.hit_colour = HIT_COLOURS["MISS"]
            note.hit_timer = DISAPPEAR_TIME
            combo = 0
            multiplier = 1
            hit_counts["MISS"] += 1
            
    return points, combo, multiplier

def spawn_notes(map, notes, lanes, elapsed_time, spawned_index, note_speed, note_colour):
    while spawned_index < len(map) and elapsed_time >= map[spawned_index][0]:
        spawn_time, lane_idx = map[spawned_index]
        lane_x = lanes[lane_idx]
        note = Note(lane_x, -100, 50, 50, note_colour)
        note.speed = note_speed  # set speed here based on song
        notes.append(note)
        spawned_index += 1
    return spawned_index

def checkKeys(event, flash_timers, notes, lanes, points, combo, multiplier, sounds):
    add_points = 0
    if event.type == pygame.KEYDOWN and event.key in KEY_TO_LANE:
        lane_index = KEY_TO_LANE[event.key]
        flash_timers[lane_index] = FLASH_DURATION # flash the lane

        lane_x = lanes[lane_index]
        hit_note = None
        best_distance = float('inf')
        
        if combo > 100:
            multiplier = 10
        elif combo > 70:
            multiplier = 5
        elif combo > 30:
            multiplier = 3
        elif combo > 10:
            multiplier = 2

        for note in notes:
            if abs(note.x - lane_x) < 50 and abs(note.y - HIT_Y) <= VERTICAL_HIT_RANGE:
                dist = abs(note.y - HIT_Y)
                if dist < best_distance:
                    best_distance = dist
                    hit_note = note

        if hit_note:
            if hit_note.y < HIT_Y - OKAY_THRESHOLD - 100: # BAD
                if multiplier >= 2:
                    sounds[4].play()
                add_points = BAD
                hit_note.hit_colour = HIT_COLOURS["BAD"]
                combo = 0
                multiplier = 1
                hit_counts["BAD"] += 1

            elif best_distance <= PERFECT_THRESHOLD: # add 200 points
                combo += 1
                add_points = PERFECT * multiplier
                hit_note.hit_colour = HIT_COLOURS["PERFECT"]
                sounds[lane_index].play()
                hit_counts["PERFECT"] += 1
                
            elif best_distance <= GOOD_THRESHOLD: # add 100 points
                combo += 1
                add_points = GOOD * multiplier
                hit_note.hit_colour = HIT_COLOURS["GOOD"]
                sounds[lane_index].play()
                hit_counts["GOOD"] += 1
                
            elif best_distance <= OKAY_THRESHOLD: # add 50 points
                combo += 1
                add_points = OKAY * multiplier
                hit_note.hit_colour = HIT_COLOURS["OKAY"]
                sounds[lane_index].play()
                hit_counts["OKAY"] += 1
                
            else:
                # play error
                if multiplier >= 2:
                    sounds[4].play()
                add_points = BAD
                hit_note.hit_colour = HIT_COLOURS["BAD"]
                combo = 0
                multiplier = 1
                hit_counts["BAD"] += 1

            hit_note.hit_timer = DISAPPEAR_TIME
    
    points += add_points
    return flash_timers, points, combo, multiplier, hit_counts

def showCombo(screen, combo, multiplier, colour):
    combo_font = pygame.font.SysFont("Arial", 24, bold=False)
    multiplier_font = pygame.font.SysFont("Arial", 48, bold=True)

    combo_text = f"Combo: {combo}"
    combo_surf = combo_font.render(combo_text, True, colour)

    pos_x, pos_y = 10, 50
    screen.blit(combo_surf, (pos_x, pos_y))

    if multiplier > 1:
        multiplier_color = (255, 0, 0)  # red
        multiplier_text = f"  x{multiplier}"
        multiplier_surf = multiplier_font.render(multiplier_text, True, multiplier_color)

        multiplier_x = pos_x + combo_surf.get_width()
        # Align multiplier vertically centered with combo text
        multiplier_y = pos_y - (multiplier_surf.get_height() - combo_surf.get_height()) // 2

        screen.blit(multiplier_surf, (multiplier_x, multiplier_y))

def select_song(screen, sounds):
    font = pygame.font.SysFont("Arial", 32)
    small_font = pygame.font.SysFont("Arial", 20) 

    # Full songs list (name, song_path, cover_path)
    all_songs = [
        ("King and Lionheart by Of Monsters and Men", "music/LionHeart.mp3", "covers/lionheart_cover.jpg"),
        ("Suki by Yuuri",      "music/Suki.mp3",     "covers/suki_cover.jpeg"),
        ("As Wished by Faye Wong", "music/As Wished.mp3", "covers/as_wished_cover.jpg"),
        ("Chimera by DECO*27",   "music/Chimera.mp3",   "covers/chimera_cover.jpg"),
        ("Snow Flower by Vincy Chan", "music/Flowers without snow.mp3", "covers/flowers_without_snow_cover.jpeg"),
        ("Sparks by Takahashi Kiara", "music/SPARKS.mp3", "covers/SPARKS_cover.jpg"),
        ("Wrap Me in Plastic by Momoland", "music/Wrap me in plastic.mp3", "covers/wrap me in plastic cover.jpg"),
        ("High Tide by Moona Hoshinova", "music/High Tide.mp3", "covers/high tide.jpeg"),
        ("It's Okay Now by MIMI (Covered by Kotoha)", "music/It's Okay Now.mp3", "covers/it's okay now cover.jpeg"),
        ("Psycho by Red Velvet", "music/Psycho.mp3", "covers/psycho_cover.jpg"),
        ("RISE UP by NiziU", "music/RISE UP.mp3", "covers/rise up.jpg"),
        ("Quit", None, None)
    ]

    # Filter songs to only those with a non-empty beatmap in song_maps
    songs = []
    for name, path, cover in all_songs:
        if name == "Quit":
            songs.append((name, path, cover))
            continue
        beatmap = song_maps.get(path)
        if beatmap and len(beatmap) > 0:
            songs.append((name, path, cover))

    if not songs:
        print("No songs with valid beatmaps available!")
        pygame.quit()
        sys.exit()

    selected_index = 0
    clock = pygame.time.Clock()

    # Preload album covers with debug prints and fallback surface
    covers = []
    for _, _, cover_path in songs:
        if cover_path is None:
            img = pygame.Surface((300, 300))
            img.fill((100, 100, 100))
            font_quit = pygame.font.SysFont("Arial", 48, bold=True)
            text_surf = font_quit.render("QUIT", True, (255, 0, 0))
            img.blit(text_surf, text_surf.get_rect(center=(150, 150)))
            covers.append(img)
        else:
            try:
                print(f"Loading cover: {cover_path}  Exists: {os.path.exists(cover_path)}")
                img = pygame.image.load(cover_path)
                try:
                    img = img.convert_alpha()
                except Exception:
                    img = img.convert()
                img = pygame.transform.scale(img, (300, 300))
            except Exception as e:
                print(f"Failed to load cover '{cover_path}': {e}")
                img = pygame.Surface((300, 300))
                img.fill((200, 200, 200))
                fallback_font = pygame.font.SysFont("Arial", 20)
                text_surf = fallback_font.render("No Cover", True, (100, 0, 0))
                file_surf = fallback_font.render(cover_path, True, (50,50,50))
                img.blit(text_surf, (10, 10))
                img.blit(file_surf, (10, 40))
            covers.append(img)

    # main selection loop
    while True:
        screen.fill(WHITE)
        title = font.render("Select a song:", True, BLACK)
        screen.blit(title, (50, 30))

        for i, (name, _, _) in enumerate(songs):
            if i == selected_index:
                color = (255, 0, 0)
                font_to_use = pygame.font.SysFont("Arial", 36, bold=True)
            else:
                color = BLACK
                font_to_use = pygame.font.SysFont("Arial", 32)

            text = font_to_use.render(f"{i+1}. {name}", True, color)
            text_pos = (80, 85 + i * 50)

            if i == selected_index:
                highlight_rect = pygame.Rect(text_pos[0]-10, text_pos[1]-5, text.get_width()+20, text.get_height()+10)
                pygame.draw.rect(screen, (255, 220, 220), highlight_rect)

            screen.blit(text, text_pos)

        # Draw a frame for album cover
        cover_x = SCREEN_WIDTH - 350
        cover_y = 50
        cover_w, cover_h = 300, 300
        pygame.draw.rect(screen, (0,0,0), (cover_x-2, cover_y-2, cover_w+4, cover_h+4), 2)

        cover_img = covers[selected_index]
        if cover_img:
            screen.blit(cover_img, (cover_x, cover_y))

        instructions = small_font.render("Use Up/Down to scroll, Enter to select", True, BLACK)
        screen.blit(instructions, (50, SCREEN_HEIGHT - 40))

        pygame.display.flip()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            elif event.type == pygame.KEYDOWN:
                sounds.play()
                if event.key == pygame.K_UP:
                    selected_index = (selected_index - 1) % len(songs)
                elif event.key == pygame.K_DOWN:
                    selected_index = (selected_index + 1) % len(songs)
                elif event.key == pygame.K_RETURN:
                    return songs[selected_index][1]

        clock.tick(30)

def load_gif_frames(folder_path):
    frames = []
    for filename in sorted(os.listdir(folder_path)):
        if filename.endswith('.png'):
            img = pygame.image.load(os.path.join(folder_path, filename)).convert_alpha()
            frames.append(img)
    return frames

def calculateAccuracy(hit_counts):
    total_hits = sum(hit_counts.values())
    if total_hits == 0:
        return 0.0

    weighted_score = 0
    max_score_per_hit = HIT_WEIGHTS["PERFECT"]  # highest possible weight

    for hit_type, count in hit_counts.items():
        weighted_score += HIT_WEIGHTS.get(hit_type, 0) * count

    max_possible_score = total_hits * max_score_per_hit

    accuracy = weighted_score / max_possible_score * 100  # percentage
    return accuracy
   
def show_hit_counts(screen, hit_counts, colour, start_x=580, start_y=10, line_height=25):
    font = pygame.font.SysFont("Arial", 24)
    y = start_y
    for hit_type in ["PERFECT", "GOOD", "OKAY", "MISS", "BAD"]:
        text = f"{hit_type}: {hit_counts.get(hit_type, 0)}"
        surf = font.render(text, True, colour)
        screen.blit(surf, (start_x - surf.get_width(), y))
        y += line_height

def play_song(screen, song_path, soundList):
    global hit_counts  # make sure this is reset for each song
    hit_counts = {"PERFECT": 0, "GOOD": 0, "OKAY": 0, "MISS": 0, "BAD": 0}

    # map
    songName = song_maps.get(song_path)
    if songName is None:
        print("No note map found for the selected song!")
        return  # go back to menu

    pygame.mixer.music.load(song_path)

    # gifs
    gif_folders = ["gifs/akari-dance", "gifs/ai-hoshino", "gifs/bocchi", "gifs/cat", "gifs/nokotan", "gifs/ui", "gifs/kobo", "gifs/miku"]
    all_gifs_frames = [load_gif_frames(folder) for folder in gif_folders]
    current_gif_frames = random.choice(all_gifs_frames)

    frame_index = 0
    frame_time = 0
    frame_duration = 50
    note_speed = song_speeds.get(song_path, 0.25)

    lanes = [LANE_START_X + i * LANE_GAP for i in range(LANE_COUNT)]
    circle_pos_y = HIT_Y

    flash_timers = [0] * LANE_COUNT
    notes = []
    points = 0
    spawn_index = 0
    start_ticks = pygame.time.get_ticks()
    
    combo = 0
    multiplier = 1
    full_combo = False
    finish_timer_started = False
    finish_timer = 0
    start_delay = 0
    music_started = False

    clock = pygame.time.Clock()
    running = True

    while running:
        dt = clock.tick(FPS)

        frame_time += dt
        if frame_time >= frame_duration:
            frame_time = 0
            frame_index = (frame_index + 1) % len(current_gif_frames)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            else:
                flash_timers, points, combo, multiplier, hit_counts = checkKeys(event, flash_timers, notes, lanes, points, combo, multiplier, soundList)

        points, combo, multiplier = update_notes(notes, dt, points, combo, multiplier, soundList)

        note_colour = SONG_NOTE_COLOURS.get(song_path, (0, 0, 255))
        elapsed_time = pygame.time.get_ticks() - start_ticks
        spawn_index = spawn_notes(songName, notes, lanes, elapsed_time, spawn_index, note_speed, note_colour)

        if not music_started and elapsed_time >= start_delay:
            pygame.mixer.music.play()
            music_started = True

        for i in range(len(flash_timers)):
            flash_timers[i] = max(0, flash_timers[i] - dt)

        screen.fill(WHITE)
        drawArea(screen, 590, 0, 650, SCREEN_HEIGHT, SEMI_BLACK)
        drawArea(screen, 0, 580, SCREEN_WIDTH, 70, WHITE)

        draw_lanes(screen, lanes, circle_pos_y)
        draw_flash(screen, flash_timers, lanes)

        for note in notes:
            note.draw(screen)

        draw_flash(screen, flash_timers, lanes)
        showPoints(screen, points, BLACK)
        showCombo(screen, combo, multiplier, BLACK)

        gif_x = SCREEN_WIDTH - 1230
        gif_y = 200
        screen.blit(current_gif_frames[frame_index], (gif_x, gif_y))

        # credits & UI
        font = pygame.font.SysFont("Arial", 18)
        screen.blit(font.render("https://github.com/Kyxp", True, MIDBLUE), (20,660))
        screen.blit(font.render("@_yumekuu", True, MIDBLUE), (20,690))
        screen.blit(font.render("2025", True, MIDBLUE), (20,600))
        screen.blit(font.render("NOT INTENDED FOR PUBLIC USE.", True, MIDBLUE), (20,630))
        screen.blit(font.render("CONTROLS: A-S-K-L", True, MIDBLUE), (200,0))

        accuracy = calculateAccuracy(hit_counts)
        font = pygame.font.SysFont("Arial", 24)
        screen.blit(font.render(f"Accuracy: {accuracy:.2f}%", True, BLACK), (10, 90))

        show_hit_counts(screen, hit_counts, BLUE)

        if spawn_index >= len(songName) and len(notes) == 0:
            if not finish_timer_started:
                finish_timer_started = True
                finish_timer = 0
                full_combo = hit_counts["MISS"] == 0 and hit_counts["BAD"] == 0 and sum(hit_counts.values()) > 0
            else:
                finish_timer += dt
                if finish_timer >= 2000:
                    font = pygame.font.SysFont("Arial", 36, bold=True)
                    text = font.render("Thank you for playing!", True, (0, 128, 0))
                    screen.blit(text, text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)))
                    if full_combo:
                        combo_font = pygame.font.SysFont("Arial", 48, bold=True)
                        combo_text = combo_font.render("FULL COMBO!", True, (255, 215, 0))
                        screen.blit(combo_text, combo_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 60)))

                if finish_timer >= 3000: 
                    for event in pygame.event.get():
                        if event.type == pygame.KEYDOWN:
                            if event.key == pygame.K_RETURN or event.key == pygame.K_ESCAPE:
                                return
                        elif event.type == pygame.QUIT:
                            pygame.quit()
                            sys.exit()
        else:
            finish_timer_started = False
            finish_timer = 0

        pygame.display.flip()


def main():
    pygame.init()
    pygame.mixer.init()

    icon = pygame.image.load("icon/icon.png")
    pygame.display.set_icon(icon)
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.display.set_caption("Music Game :D")

    # load sounds once
    soundList = [
        pygame.mixer.Sound("sfx/kick.mp3"),
        pygame.mixer.Sound("sfx/stick.mp3"),
        pygame.mixer.Sound("sfx/kick2.mp3"),
        pygame.mixer.Sound("sfx/chime.mp3"),
        pygame.mixer.Sound("sfx/error.mp3")
    ]
    choose_sound = pygame.mixer.Sound("sfx/choose.mp3")

    while True:
        song_path = select_song(screen, choose_sound)
        if song_path is None:
            pygame.quit()
            sys.exit() 
        play_song(screen, song_path, soundList)


if __name__ == "__main__":
    main()